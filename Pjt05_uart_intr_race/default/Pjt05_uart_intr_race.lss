
Pjt05_uart_intr_race.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  00000426  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800236  00800236  000004f0  2**0
                  ALLOC
  3 .stab         000007ec  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000149  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00000e28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000396  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ec  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f5  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000285  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000287a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e2       	ldi	r30, 0x26	; 38
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a6 e3       	ldi	r26, 0x36	; 54
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a9 37       	cpi	r26, 0x79	; 121
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 c0 01 	call	0x380	; 0x380 <main>
 124:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include "led.h"
#include "uart.h"


int is_prime(int n)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	fc 01       	movw	r30, r24
	int i;
	for(i=2;i<=n/2;i++)
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__divmodhi4>
 13a:	eb 01       	movw	r28, r22
 13c:	22 e0       	ldi	r18, 0x02	; 2
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
		if((n%i) ==0) return(0);
 142:	cf 01       	movw	r24, r30
 144:	b9 01       	movw	r22, r18
 146:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__divmodhi4>
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>


int is_prime(int n)
{
	int i;
	for(i=2;i<=n/2;i++)
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	c2 17       	cp	r28, r18
 154:	d3 07       	cpc	r29, r19
 156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
		if((n%i) ==0) return(0);
		return(1);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>

int is_prime(int n)
{
	int i;
	for(i=2;i<=n/2;i++)
		if((n%i) ==0) return(0);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
		return(1);
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <led>:


void led()
{
	//unit8_t DDRL,PROTL;
	DDRL=0xff;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	80 93 0a 01 	sts	0x010A, r24
	PORTL=0x00;
 16e:	10 92 0b 01 	sts	0x010B, r1
}
 172:	08 95       	ret

00000174 <led_init>:
void  led_init()
{
	Leds=DDRL = PORTL = 0xff;	// output, off all
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	80 93 0b 01 	sts	0x010B, r24
 17a:	80 93 0a 01 	sts	0x010A, r24
 17e:	80 93 36 02 	sts	0x0236, r24
}
 182:	08 95       	ret

00000184 <led_on_all>:

void  led_on_all(void)
{
	Leds = PORTL = 0x00;	// on all leds
 184:	10 92 0b 01 	sts	0x010B, r1
 188:	10 92 36 02 	sts	0x0236, r1
}//내부변수로 저장해놓는다. 쓰기전에 Leds가 변수인걸 알 수있다.
 18c:	08 95       	ret

0000018e <led_off_all>:

void  led_off_all(void)
{
	Leds = PORTL = 0xff;	// off all leds
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	80 93 0b 01 	sts	0x010B, r24
 194:	80 93 36 02 	sts	0x0236, r24
}
 198:	08 95       	ret

0000019a <led_on>:

void  led_on(uint8_t led_no)
{
	Leds &= ~(1 << led_no);
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <led_on+0xa>
 1a0:	22 0f       	add	r18, r18
 1a2:	33 1f       	adc	r19, r19
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <led_on+0x6>
 1a8:	20 95       	com	r18
 1aa:	80 91 36 02 	lds	r24, 0x0236
 1ae:	28 23       	and	r18, r24
 1b0:	20 93 36 02 	sts	0x0236, r18
	PORTL = Leds;
 1b4:	20 93 0b 01 	sts	0x010B, r18
}
 1b8:	08 95       	ret

000001ba <led_off>:

void  led_off(uint8_t led_no)
{
	Leds |= (1 << led_no);
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <led_off+0xa>
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	8a 95       	dec	r24
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <led_off+0x6>
 1c8:	80 91 36 02 	lds	r24, 0x0236
 1cc:	82 2b       	or	r24, r18
 1ce:	80 93 36 02 	sts	0x0236, r24
	PORTL = Leds;
 1d2:	80 93 0b 01 	sts	0x010B, r24
}
 1d6:	08 95       	ret

000001d8 <led_set>:

void  led_set(uint8_t led_mask)
{
	Leds = ~led_mask;
 1d8:	80 95       	com	r24
 1da:	80 93 36 02 	sts	0x0236, r24
	PORTL = Leds;
 1de:	80 93 0b 01 	sts	0x010B, r24
}
 1e2:	08 95       	ret

000001e4 <uart_init>:
//int uart_putchar_2(char ch, FILE *stream);

//FILE = Mystdout = FDEV_SETUP_STREAM (uart_putchar_2, NULL, _FDEV_SETUP_WRITE);
void uart_init()
{
	UBRR0H = 0x00;
 1e4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x07;
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A,U2X0);
 1ee:	e0 ec       	ldi	r30, 0xC0	; 192
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
 1f8:	e1 ec       	ldi	r30, 0xC1	; 193
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	88 60       	ori	r24, 0x08	; 8
 200:	80 83       	st	Z, r24
}
 202:	08 95       	ret

00000204 <uart_putchar>:

int uart_putchar(char ch)
{
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24
	if(ch=='\n')
 208:	8a 30       	cpi	r24, 0x0A	; 10
 20a:	19 f4       	brne	.+6      	; 0x212 <uart_putchar+0xe>
	uart_putchar('\r');
 20c:	8d e0       	ldi	r24, 0x0D	; 13
 20e:	0e 94 02 01 	call	0x204	; 0x204 <uart_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	9f e7       	ldi	r25, 0x7F	; 127
 216:	a4 e0       	ldi	r26, 0x04	; 4
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	a0 40       	sbci	r26, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <uart_putchar+0x14>
 220:	00 c0       	rjmp	.+0      	; 0x222 <uart_putchar+0x1e>
 222:	00 00       	nop
	_delay_ms(200);
	UDR0 = ch;
 224:	c0 93 c6 00 	sts	0x00C6, r28
	return(1);
	}
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <uart_putstr>:
int uart_putstr(char *sp)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
	for( ; *sp; sp++)
 236:	02 c0       	rjmp	.+4      	; 0x23c <uart_putstr+0xc>
		uart_putchar(*sp);
 238:	0e 94 02 01 	call	0x204	; 0x204 <uart_putchar>
	UDR0 = ch;
	return(1);
	}
int uart_putstr(char *sp)
{
	for( ; *sp; sp++)
 23c:	89 91       	ld	r24, Y+
 23e:	88 23       	and	r24, r24
 240:	d9 f7       	brne	.-10     	; 0x238 <uart_putstr+0x8>
		uart_putchar(*sp);
		return(1);
}
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <uart_putstart>:
char buf[64];
int volatile bufi, txend = 1;
int uart_putstart(char str[])
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	18 2f       	mov	r17, r24
 256:	09 2f       	mov	r16, r25
	char ch;
	int n = strlen(str);
 258:	e8 2f       	mov	r30, r24
 25a:	f9 2f       	mov	r31, r25
 25c:	ef 01       	movw	r28, r30
 25e:	09 90       	ld	r0, Y+
 260:	00 20       	and	r0, r0
 262:	e9 f7       	brne	.-6      	; 0x25e <uart_putstart+0x12>
 264:	21 97       	sbiw	r28, 0x01	; 1
 266:	ce 1b       	sub	r28, r30
 268:	df 0b       	sbc	r29, r31
	while(sizeof(buf) - strlen(buf +bufi) + -1 < n);
 26a:	2f e3       	ldi	r18, 0x3F	; 63
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	a0 91 37 02 	lds	r26, 0x0237
 272:	b0 91 38 02 	lds	r27, 0x0238
 276:	a7 5c       	subi	r26, 0xC7	; 199
 278:	bd 4f       	sbci	r27, 0xFD	; 253
 27a:	fd 01       	movw	r30, r26
 27c:	01 90       	ld	r0, Z+
 27e:	00 20       	and	r0, r0
 280:	e9 f7       	brne	.-6      	; 0x27c <uart_putstart+0x30>
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	ea 1b       	sub	r30, r26
 286:	fb 0b       	sbc	r31, r27
 288:	c9 01       	movw	r24, r18
 28a:	8e 1b       	sub	r24, r30
 28c:	9f 0b       	sbc	r25, r31
 28e:	8c 17       	cp	r24, r28
 290:	9d 07       	cpc	r25, r29
 292:	68 f3       	brcs	.-38     	; 0x26e <uart_putstart+0x22>
	cli();
 294:	f8 94       	cli
	strcpy(buf, buf + bufi);
 296:	60 91 37 02 	lds	r22, 0x0237
 29a:	70 91 38 02 	lds	r23, 0x0238
 29e:	67 5c       	subi	r22, 0xC7	; 199
 2a0:	7d 4f       	sbci	r23, 0xFD	; 253
 2a2:	89 e3       	ldi	r24, 0x39	; 57
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	0e 94 0a 02 	call	0x414	; 0x414 <strcpy>
	strcat(buf, str);
 2aa:	89 e3       	ldi	r24, 0x39	; 57
 2ac:	92 e0       	ldi	r25, 0x02	; 2
 2ae:	61 2f       	mov	r22, r17
 2b0:	70 2f       	mov	r23, r16
 2b2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <strcat>
	bufi = 0;
 2b6:	10 92 38 02 	sts	0x0238, r1
 2ba:	10 92 37 02 	sts	0x0237, r1
	if(txend) {
 2be:	80 91 33 02 	lds	r24, 0x0233
 2c2:	90 91 34 02 	lds	r25, 0x0234
 2c6:	00 97       	sbiw	r24, 0x00	; 0
 2c8:	99 f0       	breq	.+38     	; 0x2f0 <uart_putstart+0xa4>
		txend = 0;
 2ca:	10 92 34 02 	sts	0x0234, r1
 2ce:	10 92 33 02 	sts	0x0233, r1
		ch = buf[bufi++];
 2d2:	80 91 37 02 	lds	r24, 0x0237
 2d6:	90 91 38 02 	lds	r25, 0x0238
 2da:	fc 01       	movw	r30, r24
 2dc:	e7 5c       	subi	r30, 0xC7	; 199
 2de:	fd 4f       	sbci	r31, 0xFD	; 253
 2e0:	20 81       	ld	r18, Z
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	90 93 38 02 	sts	0x0238, r25
 2e8:	80 93 37 02 	sts	0x0237, r24
		UDR0 = ch;
 2ec:	20 93 c6 00 	sts	0x00C6, r18
	}
	sei();
 2f0:	78 94       	sei
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	08 95       	ret

000002fc <__vector_27>:
ISR(USART0_TX_vect)
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	0b b6       	in	r0, 0x3b	; 59
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	char ch = buf[bufi];
 314:	e0 91 37 02 	lds	r30, 0x0237
 318:	f0 91 38 02 	lds	r31, 0x0238
 31c:	e7 5c       	subi	r30, 0xC7	; 199
 31e:	fd 4f       	sbci	r31, 0xFD	; 253
 320:	20 81       	ld	r18, Z

	if(!ch) {
 322:	22 23       	and	r18, r18
 324:	59 f4       	brne	.+22     	; 0x33c <__vector_27+0x40>
			bufi = 0, txend = 1;
 326:	10 92 38 02 	sts	0x0238, r1
 32a:	10 92 37 02 	sts	0x0237, r1
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 34 02 	sts	0x0234, r25
 336:	80 93 33 02 	sts	0x0233, r24
			return;
 33a:	16 c0       	rjmp	.+44     	; 0x368 <__vector_27+0x6c>
			}
			if(ch == '\n')
 33c:	2a 30       	cpi	r18, 0x0A	; 10
 33e:	49 f4       	brne	.+18     	; 0x352 <__vector_27+0x56>
			buf[bufi] = '\r';
 340:	e0 91 37 02 	lds	r30, 0x0237
 344:	f0 91 38 02 	lds	r31, 0x0238
 348:	e7 5c       	subi	r30, 0xC7	; 199
 34a:	fd 4f       	sbci	r31, 0xFD	; 253
 34c:	8d e0       	ldi	r24, 0x0D	; 13
 34e:	80 83       	st	Z, r24
 350:	09 c0       	rjmp	.+18     	; 0x364 <__vector_27+0x68>
			else
			bufi++;
 352:	80 91 37 02 	lds	r24, 0x0237
 356:	90 91 38 02 	lds	r25, 0x0238
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 38 02 	sts	0x0238, r25
 360:	80 93 37 02 	sts	0x0237, r24
			UDR0 =ch;
 364:	20 93 c6 00 	sts	0x00C6, r18
	}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0b be       	out	0x3b, r0	; 59
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <main>:
//char buf[64];
//int bufi,txend;
int main()
{
	int i;
	uart_init();
 380:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <uart_init>
	sei();
 384:	78 94       	sei
 386:	ca e0       	ldi	r28, 0x0A	; 10
 388:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0; i<10; i++)
	{	
		uart_putstart("I love you.\n" );
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	92 e0       	ldi	r25, 0x02	; 2
 38e:	0e 94 26 01 	call	0x24c	; 0x24c <uart_putstart>
		uart_putstart("You love me.\n" );
 392:	8d e0       	ldi	r24, 0x0D	; 13
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	0e 94 26 01 	call	0x24c	; 0x24c <uart_putstart>
		uart_putstart("He loves her.\n" );
 39a:	8b e1       	ldi	r24, 0x1B	; 27
 39c:	92 e0       	ldi	r25, 0x02	; 2
 39e:	0e 94 26 01 	call	0x24c	; 0x24c <uart_putstart>
 3a2:	21 97       	sbiw	r28, 0x01	; 1
int main()
{
	int i;
	uart_init();
	sei();
	for(i=0; i<10; i++)
 3a4:	91 f7       	brne	.-28     	; 0x38a <main+0xa>
	{	
		uart_putstart("I love you.\n" );
		uart_putstart("You love me.\n" );
		uart_putstart("He loves her.\n" );
	}
	uart_putstart("End !!!\n");
 3a6:	8a e2       	ldi	r24, 0x2A	; 42
 3a8:	92 e0       	ldi	r25, 0x02	; 2
 3aa:	0e 94 26 01 	call	0x24c	; 0x24c <uart_putstart>
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <main+0x2e>

000003b0 <__divmodhi4>:
 3b0:	97 fb       	bst	r25, 7
 3b2:	09 2e       	mov	r0, r25
 3b4:	07 26       	eor	r0, r23
 3b6:	0a d0       	rcall	.+20     	; 0x3cc <__divmodhi4_neg1>
 3b8:	77 fd       	sbrc	r23, 7
 3ba:	04 d0       	rcall	.+8      	; 0x3c4 <__divmodhi4_neg2>
 3bc:	0c d0       	rcall	.+24     	; 0x3d6 <__udivmodhi4>
 3be:	06 d0       	rcall	.+12     	; 0x3cc <__divmodhi4_neg1>
 3c0:	00 20       	and	r0, r0
 3c2:	1a f4       	brpl	.+6      	; 0x3ca <__divmodhi4_exit>

000003c4 <__divmodhi4_neg2>:
 3c4:	70 95       	com	r23
 3c6:	61 95       	neg	r22
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255

000003ca <__divmodhi4_exit>:
 3ca:	08 95       	ret

000003cc <__divmodhi4_neg1>:
 3cc:	f6 f7       	brtc	.-4      	; 0x3ca <__divmodhi4_exit>
 3ce:	90 95       	com	r25
 3d0:	81 95       	neg	r24
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
 3d4:	08 95       	ret

000003d6 <__udivmodhi4>:
 3d6:	aa 1b       	sub	r26, r26
 3d8:	bb 1b       	sub	r27, r27
 3da:	51 e1       	ldi	r21, 0x11	; 17
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <__udivmodhi4_ep>

000003de <__udivmodhi4_loop>:
 3de:	aa 1f       	adc	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	a6 17       	cp	r26, r22
 3e4:	b7 07       	cpc	r27, r23
 3e6:	10 f0       	brcs	.+4      	; 0x3ec <__udivmodhi4_ep>
 3e8:	a6 1b       	sub	r26, r22
 3ea:	b7 0b       	sbc	r27, r23

000003ec <__udivmodhi4_ep>:
 3ec:	88 1f       	adc	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	5a 95       	dec	r21
 3f2:	a9 f7       	brne	.-22     	; 0x3de <__udivmodhi4_loop>
 3f4:	80 95       	com	r24
 3f6:	90 95       	com	r25
 3f8:	bc 01       	movw	r22, r24
 3fa:	cd 01       	movw	r24, r26
 3fc:	08 95       	ret

000003fe <strcat>:
 3fe:	fb 01       	movw	r30, r22
 400:	dc 01       	movw	r26, r24
 402:	0d 90       	ld	r0, X+
 404:	00 20       	and	r0, r0
 406:	e9 f7       	brne	.-6      	; 0x402 <strcat+0x4>
 408:	11 97       	sbiw	r26, 0x01	; 1
 40a:	01 90       	ld	r0, Z+
 40c:	0d 92       	st	X+, r0
 40e:	00 20       	and	r0, r0
 410:	e1 f7       	brne	.-8      	; 0x40a <strcat+0xc>
 412:	08 95       	ret

00000414 <strcpy>:
 414:	fb 01       	movw	r30, r22
 416:	dc 01       	movw	r26, r24
 418:	01 90       	ld	r0, Z+
 41a:	0d 92       	st	X+, r0
 41c:	00 20       	and	r0, r0
 41e:	e1 f7       	brne	.-8      	; 0x418 <strcpy+0x4>
 420:	08 95       	ret

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
