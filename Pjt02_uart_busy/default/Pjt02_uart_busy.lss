
Pjt02_uart_busy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000001c6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006e4  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  000009b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004c6  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000191  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000335  00000000  00000000  000010a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fb  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ec       	ldi	r30, 0xC6	; 198
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a6 e0       	ldi	r26, 0x06	; 6
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a6 30       	cpi	r26, 0x06	; 6
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 ca 00 	call	0x194	; 0x194 <main>
 124:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <uart_init>:
#include <compat/deprecated.h>
#include <util/delay.h>

void uart_init()
{
	UBRR0H = 0x00;
 12c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x07;
 130:	87 e0       	ldi	r24, 0x07	; 7
 132:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A,U2X0);
 136:	e0 ec       	ldi	r30, 0xC0	; 192
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
 140:	e1 ec       	ldi	r30, 0xC1	; 193
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
}
 14a:	08 95       	ret

0000014c <uart_putchar>:

int uart_putchar(char ch)
{
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
	if(ch=='\n')
 150:	8a 30       	cpi	r24, 0x0A	; 10
 152:	19 f4       	brne	.+6      	; 0x15a <uart_putchar+0xe>
	uart_putchar('\r');
 154:	8d e0       	ldi	r24, 0x0D	; 13
 156:	0e 94 a6 00 	call	0x14c	; 0x14c <uart_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	9f e7       	ldi	r25, 0x7F	; 127
 15e:	a4 e0       	ldi	r26, 0x04	; 4
 160:	81 50       	subi	r24, 0x01	; 1
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	a0 40       	sbci	r26, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <uart_putchar+0x14>
 168:	00 c0       	rjmp	.+0      	; 0x16a <uart_putchar+0x1e>
 16a:	00 00       	nop
	_delay_ms(200);
	UDR0 = ch;
 16c:	c0 93 c6 00 	sts	0x00C6, r28
	return(1);
	}
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <uart_putstr>:
int uart_putstr(char *sp)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
	for( ; *sp; sp++)
 17e:	02 c0       	rjmp	.+4      	; 0x184 <uart_putstr+0xc>
		uart_putchar(*sp);
 180:	0e 94 a6 00 	call	0x14c	; 0x14c <uart_putchar>
	UDR0 = ch;
	return(1);
	}
int uart_putstr(char *sp)
{
	for( ; *sp; sp++)
 184:	89 91       	ld	r24, Y+
 186:	88 23       	and	r24, r24
 188:	d9 f7       	brne	.-10     	; 0x180 <uart_putstr+0x8>
		uart_putchar(*sp);
		return(1);
}
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:
//static uint8_t i;
int main()

{
	char c;
	uart_init();
 194:	0e 94 96 00 	call	0x12c	; 0x12c <uart_init>
 198:	c5 e0       	ldi	r28, 0x05	; 5
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	0f c0       	rjmp	.+30     	; 0x1bc <main+0x28>
	for(int i=0;i<5;i++){
		for(c='A'; c<='Z'; c++)
			uart_putchar(c);
 19e:	81 2f       	mov	r24, r17
 1a0:	0e 94 a6 00 	call	0x14c	; 0x14c <uart_putchar>

{
	char c;
	uart_init();
	for(int i=0;i<5;i++){
		for(c='A'; c<='Z'; c++)
 1a4:	1f 5f       	subi	r17, 0xFF	; 255
 1a6:	1b 35       	cpi	r17, 0x5B	; 91
 1a8:	d1 f7       	brne	.-12     	; 0x19e <main+0xa>
			uart_putchar(c);
		uart_putchar('\n');
 1aa:	8a e0       	ldi	r24, 0x0A	; 10
 1ac:	0e 94 a6 00 	call	0x14c	; 0x14c <uart_putchar>

		uart_putstr("ABCD\n");
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	0e 94 bc 00 	call	0x178	; 0x178 <uart_putstr>
 1b8:	21 97       	sbiw	r28, 0x01	; 1
int main()

{
	char c;
	uart_init();
	for(int i=0;i<5;i++){
 1ba:	11 f0       	breq	.+4      	; 0x1c0 <main+0x2c>

void led();	//함수원형 waring이 나올 수 있다.
//static uint8_t i;
int main()

{
 1bc:	11 e4       	ldi	r17, 0x41	; 65
 1be:	ef cf       	rjmp	.-34     	; 0x19e <main+0xa>
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <main+0x2c>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
