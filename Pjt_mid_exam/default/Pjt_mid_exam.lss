
Pjt_mid_exam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800200  0000141c  000014b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000141c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025d  0080026e  0080026e  0000151e  2**0
                  ALLOC
  3 .stab         00000f78  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000339  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000288  00000000  00000000  000027d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f7  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f0  00000000  00000000  00004e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001384  00000000  00000000  00005f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d4  00000000  00000000  000072cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006dc  00000000  00000000  000079a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001978  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000099f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 9a 04 	jmp	0x934	; 0x934 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e1       	ldi	r30, 0x1C	; 28
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 36       	cpi	r26, 0x6E	; 110
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	14 e0       	ldi	r17, 0x04	; 4
     112:	ae e6       	ldi	r26, 0x6E	; 110
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ab 3c       	cpi	r26, 0xCB	; 203
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 3a 05 	call	0xa74	; 0xa74 <main>
     124:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <timer2_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <compat/deprecated.h>
#include "timer2.h"
void timer2_init(void) {
	TCNT2=0;
     12c:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR,AS2);
     130:	e6 eb       	ldi	r30, 0xB6	; 182
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	80 62       	ori	r24, 0x20	; 32
     138:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     13a:	e0 e7       	ldi	r30, 0x70	; 112
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	81 60       	ori	r24, 0x01	; 1
     142:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22) | (1<<CS20);
     144:	e1 eb       	ldi	r30, 0xB1	; 177
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	85 60       	ori	r24, 0x05	; 5
     14c:	80 83       	st	Z, r24
}
     14e:	08 95       	ret

00000150 <__vector_15>:
ISR(TIMER2_OVF_vect) {
     150:	1f 92       	push	r1
     152:	0f 92       	push	r0
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	0f 92       	push	r0
     158:	11 24       	eor	r1, r1
     15a:	8f 93       	push	r24
     15c:	9f 93       	push	r25
	static int count=0;
	TCNT2 = 6;
     15e:	86 e0       	ldi	r24, 0x06	; 6
     160:	80 93 b2 00 	sts	0x00B2, r24
	if((++count % 4) == 0)
     164:	80 91 6e 02 	lds	r24, 0x026E
     168:	90 91 6f 02 	lds	r25, 0x026F
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	90 93 6f 02 	sts	0x026F, r25
     172:	80 93 6e 02 	sts	0x026E, r24
     176:	83 70       	andi	r24, 0x03	; 3
     178:	90 70       	andi	r25, 0x00	; 0
     17a:	00 97       	sbiw	r24, 0x00	; 0
     17c:	19 f4       	brne	.+6      	; 0x184 <__vector_15+0x34>
		time_flag = 1;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	80 93 7f 04 	sts	0x047F, r24
}
     184:	9f 91       	pop	r25
     186:	8f 91       	pop	r24
     188:	0f 90       	pop	r0
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	0f 90       	pop	r0
     18e:	1f 90       	pop	r1
     190:	18 95       	reti

00000192 <pr_time>:
void pr_time(int sec)
{
	int ss,mm,hh;
	ss = sec % 60;  sec /= 60;
     192:	2c e3       	ldi	r18, 0x3C	; 60
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	b9 01       	movw	r22, r18
     198:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
	mm= sec % 60; sec /= 60;
	hh= sec;
	printf("%.2d:%.2d:%.2d\n",ss,mm,hh);
     19c:	4d b7       	in	r20, 0x3d	; 61
     19e:	5e b7       	in	r21, 0x3e	; 62
     1a0:	48 50       	subi	r20, 0x08	; 8
     1a2:	50 40       	sbci	r21, 0x00	; 0
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	5e bf       	out	0x3e, r21	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	4d bf       	out	0x3d, r20	; 61
     1ae:	ed b7       	in	r30, 0x3d	; 61
     1b0:	fe b7       	in	r31, 0x3e	; 62
     1b2:	31 96       	adiw	r30, 0x01	; 1
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	52 e0       	ldi	r21, 0x02	; 2
     1b8:	ad b7       	in	r26, 0x3d	; 61
     1ba:	be b7       	in	r27, 0x3e	; 62
     1bc:	12 96       	adiw	r26, 0x02	; 2
     1be:	5c 93       	st	X, r21
     1c0:	4e 93       	st	-X, r20
     1c2:	11 97       	sbiw	r26, 0x01	; 1
     1c4:	93 83       	std	Z+3, r25	; 0x03
     1c6:	82 83       	std	Z+2, r24	; 0x02
}
void pr_time(int sec)
{
	int ss,mm,hh;
	ss = sec % 60;  sec /= 60;
	mm= sec % 60; sec /= 60;
     1c8:	cb 01       	movw	r24, r22
     1ca:	b9 01       	movw	r22, r18
     1cc:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
	hh= sec;
	printf("%.2d:%.2d:%.2d\n",ss,mm,hh);
     1d0:	95 83       	std	Z+5, r25	; 0x05
     1d2:	84 83       	std	Z+4, r24	; 0x04
     1d4:	77 83       	std	Z+7, r23	; 0x07
     1d6:	66 83       	std	Z+6, r22	; 0x06
     1d8:	0e 94 0c 07 	call	0xe18	; 0xe18 <printf>
     1dc:	4d b7       	in	r20, 0x3d	; 61
     1de:	5e b7       	in	r21, 0x3e	; 62
     1e0:	48 5f       	subi	r20, 0xF8	; 248
     1e2:	5f 4f       	sbci	r21, 0xFF	; 255
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	5e bf       	out	0x3e, r21	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	4d bf       	out	0x3d, r20	; 61
}
     1ee:	08 95       	ret

000001f0 <is_prime>:
#include <string.h>
#include <stdlib.h>
#include "list.h"
#include "timer.h"

int is_prime(int n) {
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	fc 01       	movw	r30, r24
	int i;
	for(i=2;i<=n/2;i++)
     1f6:	62 e0       	ldi	r22, 0x02	; 2
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
     1fe:	eb 01       	movw	r28, r22
     200:	22 e0       	ldi	r18, 0x02	; 2
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	08 c0       	rjmp	.+16     	; 0x216 <is_prime+0x26>
		if((n%i)==0) return(0);
     206:	cf 01       	movw	r24, r30
     208:	b9 01       	movw	r22, r18
     20a:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
     20e:	00 97       	sbiw	r24, 0x00	; 0
     210:	41 f0       	breq	.+16     	; 0x222 <is_prime+0x32>
#include "list.h"
#include "timer.h"

int is_prime(int n) {
	int i;
	for(i=2;i<=n/2;i++)
     212:	2f 5f       	subi	r18, 0xFF	; 255
     214:	3f 4f       	sbci	r19, 0xFF	; 255
     216:	c2 17       	cp	r28, r18
     218:	d3 07       	cpc	r29, r19
     21a:	ac f7       	brge	.-22     	; 0x206 <is_prime+0x16>
		if((n%i)==0) return(0);
	return(1);
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	02 c0       	rjmp	.+4      	; 0x226 <is_prime+0x36>
#include "timer.h"

int is_prime(int n) {
	int i;
	for(i=2;i<=n/2;i++)
		if((n%i)==0) return(0);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <app_prime>:
void app_prime(char *ap) {
     22c:	cf 92       	push	r12
     22e:	df 92       	push	r13
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
	int t=2000,count=0,n;

	if(ap) t= atoi(ap);
     23c:	00 97       	sbiw	r24, 0x00	; 0
     23e:	21 f0       	breq	.+8      	; 0x248 <app_prime+0x1c>
     240:	0e 94 a2 06 	call	0xd44	; 0xd44 <atoi>
     244:	7c 01       	movw	r14, r24
     246:	04 c0       	rjmp	.+8      	; 0x250 <app_prime+0x24>
	for(i=2;i<=n/2;i++)
		if((n%i)==0) return(0);
	return(1);
}
void app_prime(char *ap) {
	int t=2000,count=0,n;
     248:	90 ed       	ldi	r25, 0xD0	; 208
     24a:	e9 2e       	mov	r14, r25
     24c:	97 e0       	ldi	r25, 0x07	; 7
     24e:	f9 2e       	mov	r15, r25

	if(ap) t= atoi(ap);
	for(n=2; n<=t ;n++) {
     250:	c2 e0       	ldi	r28, 0x02	; 2
     252:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=2;i<=n/2;i++)
		if((n%i)==0) return(0);
	return(1);
}
void app_prime(char *ap) {
	int t=2000,count=0,n;
     254:	00 e0       	ldi	r16, 0x00	; 0
     256:	10 e0       	ldi	r17, 0x00	; 0

	if(ap) t= atoi(ap);
	for(n=2; n<=t ;n++) {
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n",n);
     258:	80 e1       	ldi	r24, 0x10	; 16
     25a:	c8 2e       	mov	r12, r24
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	d8 2e       	mov	r13, r24
}
void app_prime(char *ap) {
	int t=2000,count=0,n;

	if(ap) t= atoi(ap);
	for(n=2; n<=t ;n++) {
     260:	16 c0       	rjmp	.+44     	; 0x28e <app_prime+0x62>
		if(is_prime(n)) {
     262:	ce 01       	movw	r24, r28
     264:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <is_prime>
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	81 f0       	breq	.+32     	; 0x28c <app_prime+0x60>
			count++;
     26c:	0f 5f       	subi	r16, 0xFF	; 255
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n",n);
     270:	00 d0       	rcall	.+0      	; 0x272 <app_prime+0x46>
     272:	0f 92       	push	r0
     274:	ed b7       	in	r30, 0x3d	; 61
     276:	fe b7       	in	r31, 0x3e	; 62
     278:	d2 82       	std	Z+2, r13	; 0x02
     27a:	c1 82       	std	Z+1, r12	; 0x01
     27c:	d4 83       	std	Z+4, r29	; 0x04
     27e:	c3 83       	std	Z+3, r28	; 0x03
     280:	0e 94 0c 07 	call	0xe18	; 0xe18 <printf>
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
}
void app_prime(char *ap) {
	int t=2000,count=0,n;

	if(ap) t= atoi(ap);
	for(n=2; n<=t ;n++) {
     28c:	21 96       	adiw	r28, 0x01	; 1
     28e:	ec 16       	cp	r14, r28
     290:	fd 06       	cpc	r15, r29
     292:	3c f7       	brge	.-50     	; 0x262 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n",n);
		}
	}
	printf("count=%d\n",count);
     294:	00 d0       	rcall	.+0      	; 0x296 <app_prime+0x6a>
     296:	0f 92       	push	r0
     298:	8a e2       	ldi	r24, 0x2A	; 42
     29a:	92 e0       	ldi	r25, 0x02	; 2
     29c:	ed b7       	in	r30, 0x3d	; 61
     29e:	fe b7       	in	r31, 0x3e	; 62
     2a0:	92 83       	std	Z+2, r25	; 0x02
     2a2:	81 83       	std	Z+1, r24	; 0x01
     2a4:	14 83       	std	Z+4, r17	; 0x04
     2a6:	03 83       	std	Z+3, r16	; 0x03
     2a8:	0e 94 0c 07 	call	0xe18	; 0xe18 <printf>
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	ff 90       	pop	r15
     2be:	ef 90       	pop	r14
     2c0:	df 90       	pop	r13
     2c2:	cf 90       	pop	r12
     2c4:	08 95       	ret

000002c6 <app_list>:
void app_list(char *ap) {
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	28 97       	sbiw	r28, 0x08	; 8
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
	char buf[8],how='a';
	struct node *np;

	if(ap) how = *ap;
     2e4:	00 97       	sbiw	r24, 0x00	; 0
     2e6:	19 f0       	breq	.+6      	; 0x2ee <app_list+0x28>
     2e8:	fc 01       	movw	r30, r24
     2ea:	f0 80       	ld	r15, Z
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <app_list+0x2c>
		}
	}
	printf("count=%d\n",count);
}
void app_list(char *ap) {
	char buf[8],how='a';
     2ee:	31 e6       	ldi	r19, 0x61	; 97
     2f0:	f3 2e       	mov	r15, r19
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf(">> ");
     2f2:	24 e3       	ldi	r18, 0x34	; 52
     2f4:	c2 2e       	mov	r12, r18
     2f6:	22 e0       	ldi	r18, 0x02	; 2
     2f8:	d2 2e       	mov	r13, r18
     2fa:	0f 92       	push	r0
     2fc:	0f 92       	push	r0
     2fe:	ed b7       	in	r30, 0x3d	; 61
     300:	fe b7       	in	r31, 0x3e	; 62
     302:	d2 82       	std	Z+2, r13	; 0x02
     304:	c1 82       	std	Z+1, r12	; 0x01
     306:	0e 94 0c 07 	call	0xe18	; 0xe18 <printf>
		if(fgets(buf,8,stdin) ==NULL)
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	40 91 c5 04 	lds	r20, 0x04C5
     312:	50 91 c6 04 	lds	r21, 0x04C6
     316:	ce 01       	movw	r24, r28
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	68 e0       	ldi	r22, 0x08	; 8
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fgets>
     322:	00 97       	sbiw	r24, 0x00	; 0
     324:	d9 f0       	breq	.+54     	; 0x35c <app_list+0x96>
			break;
		np=get_node();
     326:	0e 94 37 02 	call	0x46e	; 0x46e <get_node>
     32a:	8c 01       	movw	r16, r24
		strcpy(np->data,buf);
     32c:	be 01       	movw	r22, r28
     32e:	6f 5f       	subi	r22, 0xFF	; 255
     330:	7f 4f       	sbci	r23, 0xFF	; 255
     332:	0e 94 c9 06 	call	0xd92	; 0xd92 <strcpy>
		switch(how) {
     336:	f8 e6       	ldi	r31, 0x68	; 104
     338:	ff 16       	cp	r15, r31
     33a:	21 f0       	breq	.+8      	; 0x344 <app_list+0x7e>
     33c:	84 e7       	ldi	r24, 0x74	; 116
     33e:	f8 16       	cp	r15, r24
     340:	49 f4       	brne	.+18     	; 0x354 <app_list+0x8e>
     342:	04 c0       	rjmp	.+8      	; 0x34c <app_list+0x86>
			case 'h':insert_node_head(np); break;
     344:	c8 01       	movw	r24, r16
     346:	0e 94 3f 02 	call	0x47e	; 0x47e <insert_node_head>
     34a:	d7 cf       	rjmp	.-82     	; 0x2fa <app_list+0x34>
			case 't':insert_node_tail(np); break;
     34c:	c8 01       	movw	r24, r16
     34e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <insert_node_tail>
     352:	d3 cf       	rjmp	.-90     	; 0x2fa <app_list+0x34>
			default:insert_node_ascn(np); break;
     354:	c8 01       	movw	r24, r16
     356:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <insert_node_ascn>
     35a:	cf cf       	rjmp	.-98     	; 0x2fa <app_list+0x34>
		}
	}
	tour_list();
     35c:	0e 94 ad 02 	call	0x55a	; 0x55a <tour_list>
	free_list();
     360:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <free_list>
}
     364:	28 96       	adiw	r28, 0x08	; 8
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	df 90       	pop	r13
     37c:	cf 90       	pop	r12
     37e:	08 95       	ret

00000380 <app_timer>:
void app_timer(char *ap) {
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	62 97       	sbiw	r28, 0x12	; 18
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	f8 94       	cli
     392:	de bf       	out	0x3e, r29	; 62
     394:	0f be       	out	0x3f, r0	; 63
     396:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     398:	04 e3       	ldi	r16, 0x34	; 52
     39a:	12 e0       	ldi	r17, 0x02	; 2
     39c:	0f 92       	push	r0
     39e:	0f 92       	push	r0
     3a0:	ed b7       	in	r30, 0x3d	; 61
     3a2:	fe b7       	in	r31, 0x3e	; 62
     3a4:	12 83       	std	Z+2, r17	; 0x02
     3a6:	01 83       	std	Z+1, r16	; 0x01
     3a8:	0e 94 0c 07 	call	0xe18	; 0xe18 <printf>
		if(fgets(buf,8,stdin) ==NULL || (ms=atoi(buf))==0)
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	40 91 c5 04 	lds	r20, 0x04C5
     3b4:	50 91 c6 04 	lds	r21, 0x04C6
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	68 e0       	ldi	r22, 0x08	; 8
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fgets>
     3c4:	00 97       	sbiw	r24, 0x00	; 0
     3c6:	61 f0       	breq	.+24     	; 0x3e0 <app_timer+0x60>
     3c8:	ce 01       	movw	r24, r28
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	0e 94 a2 06 	call	0xd44	; 0xd44 <atoi>
     3d0:	bc 01       	movw	r22, r24
     3d2:	00 97       	sbiw	r24, 0x00	; 0
     3d4:	29 f0       	breq	.+10     	; 0x3e0 <app_timer+0x60>
			break;
		insert_timer(&tsk,ms);
     3d6:	ce 01       	movw	r24, r28
     3d8:	09 96       	adiw	r24, 0x09	; 9
     3da:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <insert_timer>
	}
     3de:	de cf       	rjmp	.-68     	; 0x39c <app_timer+0x1c>
	tour_timer();
     3e0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <tour_timer>
	free_timer();
     3e4:	0e 94 ba 03 	call	0x774	; 0x774 <free_timer>
}
     3e8:	62 96       	adiw	r28, 0x12	; 18
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	08 95       	ret

000003fe <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init() {
	Leds = DDRL = PORTL = 0xff;
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	80 93 0b 01 	sts	0x010B, r24
     404:	80 93 0a 01 	sts	0x010A, r24
     408:	80 93 70 02 	sts	0x0270, r24
}
     40c:	08 95       	ret

0000040e <led_on_all>:
void led_on_all() {
	Leds = PORTL = 0x00;
     40e:	10 92 0b 01 	sts	0x010B, r1
     412:	10 92 70 02 	sts	0x0270, r1
}
     416:	08 95       	ret

00000418 <led_off_all>:
void led_off_all() {
	Leds = PORTL = 0xff;
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	80 93 0b 01 	sts	0x010B, r24
     41e:	80 93 70 02 	sts	0x0270, r24
}
     422:	08 95       	ret

00000424 <led_on>:
void led_on(uint8_t led_no) {
	Leds &= ~(1<<led_no);
     424:	21 e0       	ldi	r18, 0x01	; 1
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	02 c0       	rjmp	.+4      	; 0x42e <led_on+0xa>
     42a:	22 0f       	add	r18, r18
     42c:	33 1f       	adc	r19, r19
     42e:	8a 95       	dec	r24
     430:	e2 f7       	brpl	.-8      	; 0x42a <led_on+0x6>
     432:	20 95       	com	r18
     434:	80 91 70 02 	lds	r24, 0x0270
     438:	28 23       	and	r18, r24
     43a:	20 93 70 02 	sts	0x0270, r18
	PORTL = Leds;
     43e:	20 93 0b 01 	sts	0x010B, r18
}
     442:	08 95       	ret

00000444 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1<<led_no);
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	02 c0       	rjmp	.+4      	; 0x44e <led_off+0xa>
     44a:	22 0f       	add	r18, r18
     44c:	33 1f       	adc	r19, r19
     44e:	8a 95       	dec	r24
     450:	e2 f7       	brpl	.-8      	; 0x44a <led_off+0x6>
     452:	80 91 70 02 	lds	r24, 0x0270
     456:	82 2b       	or	r24, r18
     458:	80 93 70 02 	sts	0x0270, r24
	PORTL = Leds;
     45c:	80 93 0b 01 	sts	0x010B, r24
}
     460:	08 95       	ret

00000462 <led_set>:
void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     462:	80 95       	com	r24
     464:	80 93 70 02 	sts	0x0270, r24
	PORTL = Leds;
     468:	80 93 0b 01 	sts	0x010B, r24
}
     46c:	08 95       	ret

0000046e <get_node>:

struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;
	cp=(struct node *)malloc(sizeof(struct node));
     46e:	8a e0       	ldi	r24, 0x0A	; 10
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 73 05 	call	0xae6	; 0xae6 <malloc>
	return(cp);
}
     476:	08 95       	ret

00000478 <free_node>:
void free_node(struct node *np) {
	free(np);
     478:	0e 94 09 06 	call	0xc12	; 0xc12 <free>
}
     47c:	08 95       	ret

0000047e <insert_node_head>:
void insert_node_head(struct node *np) {
     47e:	fc 01       	movw	r30, r24
	if(!Head) {
     480:	80 91 71 02 	lds	r24, 0x0271
     484:	90 91 72 02 	lds	r25, 0x0272
     488:	00 97       	sbiw	r24, 0x00	; 0
     48a:	39 f4       	brne	.+14     	; 0x49a <insert_node_head+0x1c>
		Head = np;
     48c:	f0 93 72 02 	sts	0x0272, r31
     490:	e0 93 71 02 	sts	0x0271, r30
		np->link = NULL;
     494:	11 86       	std	Z+9, r1	; 0x09
     496:	10 86       	std	Z+8, r1	; 0x08
     498:	08 95       	ret
	}
	else {
		np->link = Head;
     49a:	91 87       	std	Z+9, r25	; 0x09
     49c:	80 87       	std	Z+8, r24	; 0x08
		Head = np;
     49e:	f0 93 72 02 	sts	0x0272, r31
     4a2:	e0 93 71 02 	sts	0x0271, r30
     4a6:	08 95       	ret

000004a8 <insert_node_tail>:
	}
}
void insert_node_tail(struct node *np) {
	struct node *cp;
	if(!Head)
     4a8:	e0 91 71 02 	lds	r30, 0x0271
     4ac:	f0 91 72 02 	lds	r31, 0x0272
     4b0:	30 97       	sbiw	r30, 0x00	; 0
     4b2:	31 f4       	brne	.+12     	; 0x4c0 <insert_node_tail+0x18>
		Head=np;
     4b4:	90 93 72 02 	sts	0x0272, r25
     4b8:	80 93 71 02 	sts	0x0271, r24
     4bc:	08 c0       	rjmp	.+16     	; 0x4ce <insert_node_tail+0x26>
	else {
		for(cp=Head; cp->link != NULL; cp=cp->link)
     4be:	f9 01       	movw	r30, r18
     4c0:	20 85       	ldd	r18, Z+8	; 0x08
     4c2:	31 85       	ldd	r19, Z+9	; 0x09
     4c4:	21 15       	cp	r18, r1
     4c6:	31 05       	cpc	r19, r1
     4c8:	d1 f7       	brne	.-12     	; 0x4be <insert_node_tail+0x16>
			;
		cp->link=np;
     4ca:	91 87       	std	Z+9, r25	; 0x09
     4cc:	80 87       	std	Z+8, r24	; 0x08
	}
	np->link=NULL;
     4ce:	fc 01       	movw	r30, r24
     4d0:	11 86       	std	Z+9, r1	; 0x09
     4d2:	10 86       	std	Z+8, r1	; 0x08
}
     4d4:	08 95       	ret

000004d6 <insert_node_ascn>:

void insert_node_ascn(struct node *np) {
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ec 01       	movw	r28, r24
	struct node *cp, *pp;
	if(!Head) {
     4e8:	c0 90 71 02 	lds	r12, 0x0271
     4ec:	d0 90 72 02 	lds	r13, 0x0272
     4f0:	c1 14       	cp	r12, r1
     4f2:	d1 04       	cpc	r13, r1
     4f4:	79 f4       	brne	.+30     	; 0x514 <insert_node_ascn+0x3e>
		Head=np;
     4f6:	90 93 72 02 	sts	0x0272, r25
     4fa:	80 93 71 02 	sts	0x0271, r24
		np->link =NULL;
     4fe:	19 86       	std	Y+9, r1	; 0x09
     500:	18 86       	std	Y+8, r1	; 0x08
     502:	22 c0       	rjmp	.+68     	; 0x548 <insert_node_ascn+0x72>
	}
	else {
		for(cp=Head,pp=NULL;cp!=NULL && strcmp(cp->data,np->data) < 0 ; pp=cp,cp=cp->link)
     504:	f8 01       	movw	r30, r16
     506:	80 85       	ldd	r24, Z+8	; 0x08
     508:	91 85       	ldd	r25, Z+9	; 0x09
     50a:	78 01       	movw	r14, r16
     50c:	00 97       	sbiw	r24, 0x00	; 0
     50e:	59 f0       	breq	.+22     	; 0x526 <insert_node_ascn+0x50>
     510:	8c 01       	movw	r16, r24
     512:	03 c0       	rjmp	.+6      	; 0x51a <insert_node_ascn+0x44>
	np->link=NULL;
}

void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
     514:	86 01       	movw	r16, r12
     516:	ee 24       	eor	r14, r14
     518:	ff 24       	eor	r15, r15
		Head=np;
		np->link =NULL;
	}
	else {
		for(cp=Head,pp=NULL;cp!=NULL && strcmp(cp->data,np->data) < 0 ; pp=cp,cp=cp->link)
     51a:	c8 01       	movw	r24, r16
     51c:	be 01       	movw	r22, r28
     51e:	0e 94 c0 06 	call	0xd80	; 0xd80 <strcmp>
     522:	97 fd       	sbrc	r25, 7
     524:	ef cf       	rjmp	.-34     	; 0x504 <insert_node_ascn+0x2e>
			;
		if(pp==NULL) {
     526:	e1 14       	cp	r14, r1
     528:	f1 04       	cpc	r15, r1
     52a:	39 f4       	brne	.+14     	; 0x53a <insert_node_ascn+0x64>
			np->link = Head;
     52c:	d9 86       	std	Y+9, r13	; 0x09
     52e:	c8 86       	std	Y+8, r12	; 0x08
			Head=np;
     530:	d0 93 72 02 	sts	0x0272, r29
     534:	c0 93 71 02 	sts	0x0271, r28
     538:	07 c0       	rjmp	.+14     	; 0x548 <insert_node_ascn+0x72>
		}
		else {
			np->link = pp->link;
     53a:	f7 01       	movw	r30, r14
     53c:	80 85       	ldd	r24, Z+8	; 0x08
     53e:	91 85       	ldd	r25, Z+9	; 0x09
     540:	99 87       	std	Y+9, r25	; 0x09
     542:	88 87       	std	Y+8, r24	; 0x08
			pp->link = np;
     544:	d1 87       	std	Z+9, r29	; 0x09
     546:	c0 87       	std	Z+8, r28	; 0x08
		}
	}
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	08 95       	ret

0000055a <tour_list>:
void tour_list() {
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
	struct node *cp;
	printf("\n");
     562:	8a e0       	ldi	r24, 0x0A	; 10
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 1e 07 	call	0xe3c	; 0xe3c <putchar>
	for(cp=Head; cp!=NULL;cp=cp->link)
     56a:	c0 91 71 02 	lds	r28, 0x0271
     56e:	d0 91 72 02 	lds	r29, 0x0272
		printf("-->%s ",cp->data);
     572:	08 e3       	ldi	r16, 0x38	; 56
     574:	12 e0       	ldi	r17, 0x02	; 2
	}
}
void tour_list() {
	struct node *cp;
	printf("\n");
	for(cp=Head; cp!=NULL;cp=cp->link)
     576:	11 c0       	rjmp	.+34     	; 0x59a <tour_list+0x40>
		printf("-->%s ",cp->data);
     578:	00 d0       	rcall	.+0      	; 0x57a <tour_list+0x20>
     57a:	0f 92       	push	r0
     57c:	ed b7       	in	r30, 0x3d	; 61
     57e:	fe b7       	in	r31, 0x3e	; 62
     580:	12 83       	std	Z+2, r17	; 0x02
     582:	01 83       	std	Z+1, r16	; 0x01
     584:	d4 83       	std	Z+4, r29	; 0x04
     586:	c3 83       	std	Z+3, r28	; 0x03
     588:	0e 94 0c 07 	call	0xe18	; 0xe18 <printf>
	}
}
void tour_list() {
	struct node *cp;
	printf("\n");
	for(cp=Head; cp!=NULL;cp=cp->link)
     58c:	08 84       	ldd	r0, Y+8	; 0x08
     58e:	d9 85       	ldd	r29, Y+9	; 0x09
     590:	c0 2d       	mov	r28, r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	20 97       	sbiw	r28, 0x00	; 0
     59c:	69 f7       	brne	.-38     	; 0x578 <tour_list+0x1e>
		printf("-->%s ",cp->data);
	printf("\n");
     59e:	8a e0       	ldi	r24, 0x0A	; 10
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <putchar>
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <free_list>:

void free_list() {
	struct node *cp;

	for(;Head!=NULL;) {
     5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <free_list+0x14>
		cp=Head;
		Head=cp->link;
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 85       	ldd	r18, Z+8	; 0x08
     5b6:	31 85       	ldd	r19, Z+9	; 0x09
     5b8:	30 93 72 02 	sts	0x0272, r19
     5bc:	20 93 71 02 	sts	0x0271, r18
	struct node *cp;
	cp=(struct node *)malloc(sizeof(struct node));
	return(cp);
}
void free_node(struct node *np) {
	free(np);
     5c0:	0e 94 09 06 	call	0xc12	; 0xc12 <free>
}

void free_list() {
	struct node *cp;

	for(;Head!=NULL;) {
     5c4:	80 91 71 02 	lds	r24, 0x0271
     5c8:	90 91 72 02 	lds	r25, 0x0272
     5cc:	00 97       	sbiw	r24, 0x00	; 0
     5ce:	89 f7       	brne	.-30     	; 0x5b2 <free_list+0x2>
		cp=Head;
		Head=cp->link;
		free_node(cp);
	}
}
     5d0:	08 95       	ret

000005d2 <q_init>:

static char qi[QI_SIZE],qo[QO_SIZE];
static int fi,ri,fo,ro;

void q_init() {
	fi=ri=fo=ro=0;
     5d2:	10 92 74 02 	sts	0x0274, r1
     5d6:	10 92 73 02 	sts	0x0273, r1
     5da:	10 92 76 02 	sts	0x0276, r1
     5de:	10 92 75 02 	sts	0x0275, r1
     5e2:	10 92 78 02 	sts	0x0278, r1
     5e6:	10 92 77 02 	sts	0x0277, r1
     5ea:	10 92 7a 02 	sts	0x027A, r1
     5ee:	10 92 79 02 	sts	0x0279, r1
}
     5f2:	08 95       	ret

000005f4 <qi_insert>:

int qi_insert(char ch) {
     5f4:	48 2f       	mov	r20, r24
	if((ri+1)%QI_SIZE ==fi)
     5f6:	20 91 77 02 	lds	r18, 0x0277
     5fa:	30 91 78 02 	lds	r19, 0x0278
     5fe:	2f 5f       	subi	r18, 0xFF	; 255
     600:	3f 4f       	sbci	r19, 0xFF	; 255
     602:	c9 01       	movw	r24, r18
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	71 e0       	ldi	r23, 0x01	; 1
     608:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
     60c:	9c 01       	movw	r18, r24
     60e:	80 91 79 02 	lds	r24, 0x0279
     612:	90 91 7a 02 	lds	r25, 0x027A
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	59 f0       	breq	.+22     	; 0x632 <qi_insert+0x3e>
		return(0);	// full
	ri=(ri+1)%QI_SIZE;
     61c:	30 93 78 02 	sts	0x0278, r19
     620:	20 93 77 02 	sts	0x0277, r18
	qi[ri]=ch;
     624:	25 58       	subi	r18, 0x85	; 133
     626:	3d 4f       	sbci	r19, 0xFD	; 253
     628:	f9 01       	movw	r30, r18
     62a:	40 83       	st	Z, r20
	return(1);
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	08 95       	ret
	fi=ri=fo=ro=0;
}

int qi_insert(char ch) {
	if((ri+1)%QI_SIZE ==fi)
		return(0);	// full
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
	ri=(ri+1)%QI_SIZE;
	qi[ri]=ch;
	return(1);
}
     636:	08 95       	ret

00000638 <qi_delete>:

int qi_delete() {
	if(ri==fi)
     638:	80 91 79 02 	lds	r24, 0x0279
     63c:	90 91 7a 02 	lds	r25, 0x027A
     640:	20 91 77 02 	lds	r18, 0x0277
     644:	30 91 78 02 	lds	r19, 0x0278
     648:	28 17       	cp	r18, r24
     64a:	39 07       	cpc	r19, r25
     64c:	79 f0       	breq	.+30     	; 0x66c <qi_delete+0x34>
		return(0);	// empty
	fi=(fi+1)%QI_SIZE;
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
     658:	90 93 7a 02 	sts	0x027A, r25
     65c:	80 93 79 02 	sts	0x0279, r24
	return(qi[fi]);
     660:	85 58       	subi	r24, 0x85	; 133
     662:	9d 4f       	sbci	r25, 0xFD	; 253
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	08 95       	ret
	return(1);
}

int qi_delete() {
	if(ri==fi)
		return(0);	// empty
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
	fi=(fi+1)%QI_SIZE;
	return(qi[fi]);
}
     670:	08 95       	ret

00000672 <qo_insert>:

int qo_insert(char ch) {
     672:	48 2f       	mov	r20, r24
	if((ro+1)%QO_SIZE ==fo)
     674:	20 91 73 02 	lds	r18, 0x0273
     678:	30 91 74 02 	lds	r19, 0x0274
     67c:	2f 5f       	subi	r18, 0xFF	; 255
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
     680:	c9 01       	movw	r24, r18
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	71 e0       	ldi	r23, 0x01	; 1
     686:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
     68a:	9c 01       	movw	r18, r24
     68c:	80 91 75 02 	lds	r24, 0x0275
     690:	90 91 76 02 	lds	r25, 0x0276
     694:	28 17       	cp	r18, r24
     696:	39 07       	cpc	r19, r25
     698:	59 f0       	breq	.+22     	; 0x6b0 <qo_insert+0x3e>
		return(0);	// full
	ro=(ro+1)%QO_SIZE;
     69a:	30 93 74 02 	sts	0x0274, r19
     69e:	20 93 73 02 	sts	0x0273, r18
	qo[ro]=ch;
     6a2:	25 58       	subi	r18, 0x85	; 133
     6a4:	3c 4f       	sbci	r19, 0xFC	; 252
     6a6:	f9 01       	movw	r30, r18
     6a8:	40 83       	st	Z, r20
	return(1);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	08 95       	ret
	return(qi[fi]);
}

int qo_insert(char ch) {
	if((ro+1)%QO_SIZE ==fo)
		return(0);	// full
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
	ro=(ro+1)%QO_SIZE;
	qo[ro]=ch;
	return(1);
}
     6b4:	08 95       	ret

000006b6 <qo_delete>:

int qo_delete() {
	if(ro==fo)
     6b6:	80 91 75 02 	lds	r24, 0x0275
     6ba:	90 91 76 02 	lds	r25, 0x0276
     6be:	20 91 73 02 	lds	r18, 0x0273
     6c2:	30 91 74 02 	lds	r19, 0x0274
     6c6:	28 17       	cp	r18, r24
     6c8:	39 07       	cpc	r19, r25
     6ca:	79 f0       	breq	.+30     	; 0x6ea <qo_delete+0x34>
		return(0);	// empty
	fo=(fo+1)%QO_SIZE;
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	71 e0       	ldi	r23, 0x01	; 1
     6d2:	0e 94 4c 05 	call	0xa98	; 0xa98 <__divmodhi4>
     6d6:	90 93 76 02 	sts	0x0276, r25
     6da:	80 93 75 02 	sts	0x0275, r24
	return(qo[fo]);
     6de:	85 58       	subi	r24, 0x85	; 133
     6e0:	9c 4f       	sbci	r25, 0xFC	; 252
     6e2:	fc 01       	movw	r30, r24
     6e4:	80 81       	ld	r24, Z
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	08 95       	ret
	return(1);
}

int qo_delete() {
	if(ro==fo)
		return(0);	// empty
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
	fo=(fo+1)%QO_SIZE;
	return(qo[fo]);
}
     6ee:	08 95       	ret

000006f0 <tour_timer>:
		pp->link=tp;
		tp->link=cp;
	}
}

void tour_timer() {
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
	struct timer *cp;
	int total=0;

	printf("\n");
     6fc:	8a e0       	ldi	r24, 0x0A	; 10
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 1e 07 	call	0xe3c	; 0xe3c <putchar>
	for(cp=Thead; cp!=NULL; cp=cp->link) {
     704:	c0 91 7b 04 	lds	r28, 0x047B
     708:	d0 91 7c 04 	lds	r29, 0x047C
	}
}

void tour_timer() {
	struct timer *cp;
	int total=0;
     70c:	00 e0       	ldi	r16, 0x00	; 0
     70e:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp=Thead; cp!=NULL; cp=cp->link) {
		total +=cp->time;
		printf("-->%d(%d) ", cp->time, total);
     710:	8f e3       	ldi	r24, 0x3F	; 63
     712:	e8 2e       	mov	r14, r24
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total=0;

	printf("\n");
	for(cp=Thead; cp!=NULL; cp=cp->link) {
     718:	20 c0       	rjmp	.+64     	; 0x75a <tour_timer+0x6a>
		total +=cp->time;
     71a:	88 81       	ld	r24, Y
     71c:	99 81       	ldd	r25, Y+1	; 0x01
     71e:	08 0f       	add	r16, r24
     720:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     722:	00 d0       	rcall	.+0      	; 0x724 <tour_timer+0x34>
     724:	00 d0       	rcall	.+0      	; 0x726 <tour_timer+0x36>
     726:	ed b7       	in	r30, 0x3d	; 61
     728:	fe b7       	in	r31, 0x3e	; 62
     72a:	31 96       	adiw	r30, 0x01	; 1
     72c:	ad b7       	in	r26, 0x3d	; 61
     72e:	be b7       	in	r27, 0x3e	; 62
     730:	12 96       	adiw	r26, 0x02	; 2
     732:	fc 92       	st	X, r15
     734:	ee 92       	st	-X, r14
     736:	11 97       	sbiw	r26, 0x01	; 1
     738:	93 83       	std	Z+3, r25	; 0x03
     73a:	82 83       	std	Z+2, r24	; 0x02
     73c:	15 83       	std	Z+5, r17	; 0x05
     73e:	04 83       	std	Z+4, r16	; 0x04
     740:	0e 94 0c 07 	call	0xe18	; 0xe18 <printf>
void tour_timer() {
	struct timer *cp;
	int total=0;

	printf("\n");
	for(cp=Thead; cp!=NULL; cp=cp->link) {
     744:	0c 84       	ldd	r0, Y+12	; 0x0c
     746:	dd 85       	ldd	r29, Y+13	; 0x0d
     748:	c0 2d       	mov	r28, r0
     74a:	8d b7       	in	r24, 0x3d	; 61
     74c:	9e b7       	in	r25, 0x3e	; 62
     74e:	06 96       	adiw	r24, 0x06	; 6
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	9e bf       	out	0x3e, r25	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	8d bf       	out	0x3d, r24	; 61
     75a:	20 97       	sbiw	r28, 0x00	; 0
     75c:	f1 f6       	brne	.-68     	; 0x71a <tour_timer+0x2a>
		total +=cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     75e:	8a e0       	ldi	r24, 0x0A	; 10
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 1e 07 	call	0xe3c	; 0xe3c <putchar>
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	08 95       	ret

00000774 <free_timer>:

void free_timer() {
	struct timer *cp;
	for(;Thead !=NULL ; ) {
     774:	09 c0       	rjmp	.+18     	; 0x788 <free_timer+0x14>
		cp=Thead;
		Thead = cp->link;
     776:	fc 01       	movw	r30, r24
     778:	24 85       	ldd	r18, Z+12	; 0x0c
     77a:	35 85       	ldd	r19, Z+13	; 0x0d
     77c:	30 93 7c 04 	sts	0x047C, r19
     780:	20 93 7b 04 	sts	0x047B, r18
		free(cp);
     784:	0e 94 09 06 	call	0xc12	; 0xc12 <free>
	printf("\n");
}

void free_timer() {
	struct timer *cp;
	for(;Thead !=NULL ; ) {
     788:	80 91 7b 04 	lds	r24, 0x047B
     78c:	90 91 7c 04 	lds	r25, 0x047C
     790:	00 97       	sbiw	r24, 0x00	; 0
     792:	89 f7       	brne	.-30     	; 0x776 <free_timer+0x2>
		cp=Thead;
		Thead = cp->link;
		free(cp);
	}
}
     794:	08 95       	ret

00000796 <get_timer>:

struct timer *get_timer() {
	struct timer *tp;

	tp=(struct timer *)malloc(sizeof(*tp));
     796:	8e e0       	ldi	r24, 0x0E	; 14
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 73 05 	call	0xae6	; 0xae6 <malloc>
	return(tp);
}
     79e:	08 95       	ret

000007a0 <insert_timer>:
#include <stdlib.h>
#include "timer.h"

struct timer *Thead = NULL;

void insert_timer(struct task *tskp, int ms) {
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	f8 2e       	mov	r15, r24
     7ae:	e9 2e       	mov	r14, r25
     7b0:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp= get_timer();
     7b2:	0e 94 cb 03 	call	0x796	; 0x796 <get_timer>
     7b6:	ec 01       	movw	r28, r24
	tp->task=*tskp;
     7b8:	dc 01       	movw	r26, r24
     7ba:	12 96       	adiw	r26, 0x02	; 2
     7bc:	ef 2d       	mov	r30, r15
     7be:	fe 2d       	mov	r31, r14
     7c0:	8a e0       	ldi	r24, 0x0A	; 10
     7c2:	01 90       	ld	r0, Z+
     7c4:	0d 92       	st	X+, r0
     7c6:	81 50       	subi	r24, 0x01	; 1
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <insert_timer+0x22>
	tp->time = ms;
     7ca:	19 83       	std	Y+1, r17	; 0x01
     7cc:	08 83       	st	Y, r16

	if(Thead == NULL) {
     7ce:	e0 91 7b 04 	lds	r30, 0x047B
     7d2:	f0 91 7c 04 	lds	r31, 0x047C
     7d6:	30 97       	sbiw	r30, 0x00	; 0
     7d8:	29 f4       	brne	.+10     	; 0x7e4 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     7da:	d0 93 7c 04 	sts	0x047C, r29
     7de:	c0 93 7b 04 	sts	0x047B, r28
     7e2:	2f c0       	rjmp	.+94     	; 0x842 <insert_timer+0xa2>

	tp= get_timer();
	tp->task=*tskp;
	tp->time = ms;

	if(Thead == NULL) {
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp= NULL, total = 0;
	for(cp=Thead;cp;cp=cp->link) {
     7ee:	fd 01       	movw	r30, r26
		total+=cp->time;
     7f0:	80 81       	ld	r24, Z
     7f2:	91 81       	ldd	r25, Z+1	; 0x01
     7f4:	28 0f       	add	r18, r24
     7f6:	39 1f       	adc	r19, r25
		if(total >=ms)
     7f8:	20 17       	cp	r18, r16
     7fa:	31 07       	cpc	r19, r17
     7fc:	34 f4       	brge	.+12     	; 0x80a <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp= NULL, total = 0;
	for(cp=Thead;cp;cp=cp->link) {
     7fe:	a4 85       	ldd	r26, Z+12	; 0x0c
     800:	b5 85       	ldd	r27, Z+13	; 0x0d
     802:	af 01       	movw	r20, r30
     804:	10 97       	sbiw	r26, 0x00	; 0
     806:	99 f7       	brne	.-26     	; 0x7ee <insert_timer+0x4e>
     808:	01 c0       	rjmp	.+2      	; 0x80c <insert_timer+0x6c>
		total+=cp->time;
		if(total >=ms)
     80a:	df 01       	movw	r26, r30
			break;
		pp=cp;
	}
	if(pp==NULL) {
     80c:	41 15       	cp	r20, r1
     80e:	51 05       	cpc	r21, r1
     810:	79 f4       	brne	.+30     	; 0x830 <insert_timer+0x90>
		cp->time -= tp->time;
     812:	8d 91       	ld	r24, X+
     814:	9c 91       	ld	r25, X
     816:	11 97       	sbiw	r26, 0x01	; 1
     818:	80 1b       	sub	r24, r16
     81a:	91 0b       	sbc	r25, r17
     81c:	11 96       	adiw	r26, 0x01	; 1
     81e:	9c 93       	st	X, r25
     820:	8e 93       	st	-X, r24
		tp->link = cp, Thead =tp;
     822:	bd 87       	std	Y+13, r27	; 0x0d
     824:	ac 87       	std	Y+12, r26	; 0x0c
     826:	d0 93 7c 04 	sts	0x047C, r29
     82a:	c0 93 7b 04 	sts	0x047B, r28
     82e:	24 c0       	rjmp	.+72     	; 0x878 <insert_timer+0xd8>
	}
	else if(cp==NULL) {
     830:	10 97       	sbiw	r26, 0x00	; 0
     832:	51 f4       	brne	.+20     	; 0x848 <insert_timer+0xa8>
		tp->time -= total;
     834:	02 1b       	sub	r16, r18
     836:	13 0b       	sbc	r17, r19
     838:	19 83       	std	Y+1, r17	; 0x01
     83a:	08 83       	st	Y, r16
		pp->link = tp;
     83c:	fa 01       	movw	r30, r20
     83e:	d5 87       	std	Z+13, r29	; 0x0d
     840:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     842:	1d 86       	std	Y+13, r1	; 0x0d
     844:	1c 86       	std	Y+12, r1	; 0x0c
     846:	18 c0       	rjmp	.+48     	; 0x878 <insert_timer+0xd8>
	}
	else {
		total-=cp->time;
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	11 97       	sbiw	r26, 0x01	; 1
     84e:	b9 01       	movw	r22, r18
     850:	68 1b       	sub	r22, r24
     852:	79 0b       	sbc	r23, r25
		tp->time-=total;
     854:	98 01       	movw	r18, r16
     856:	26 1b       	sub	r18, r22
     858:	37 0b       	sbc	r19, r23
     85a:	39 83       	std	Y+1, r19	; 0x01
     85c:	28 83       	st	Y, r18
		cp->time-=tp->time;
     85e:	8d 91       	ld	r24, X+
     860:	9c 91       	ld	r25, X
     862:	11 97       	sbiw	r26, 0x01	; 1
     864:	82 1b       	sub	r24, r18
     866:	93 0b       	sbc	r25, r19
     868:	11 96       	adiw	r26, 0x01	; 1
     86a:	9c 93       	st	X, r25
     86c:	8e 93       	st	-X, r24
		pp->link=tp;
     86e:	fa 01       	movw	r30, r20
     870:	d5 87       	std	Z+13, r29	; 0x0d
     872:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link=cp;
     874:	bd 87       	std	Y+13, r27	; 0x0d
     876:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	08 95       	ret

00000886 <uart_putchar>:
	} while(ch==0);

	if(ch==ETX) return(-1);
	else return(ch);
}
int uart_putchar(char ch, FILE *stream) {
     886:	cf 93       	push	r28
     888:	c8 2f       	mov	r28, r24
	if(ch=='\n')
     88a:	8a 30       	cpi	r24, 0x0A	; 10
     88c:	19 f4       	brne	.+6      	; 0x894 <uart_putchar+0xe>
		uart_putchar('\r',stream);
     88e:	8d e0       	ldi	r24, 0x0D	; 13
     890:	0e 94 43 04 	call	0x886	; 0x886 <uart_putchar>
	cli();
     894:	f8 94       	cli
	if(!uart_busy) {
     896:	80 91 80 04 	lds	r24, 0x0480
     89a:	88 23       	and	r24, r24
     89c:	59 f4       	brne	.+22     	; 0x8b4 <uart_putchar+0x2e>
		UDR0 = ch;
     89e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy=1;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 80 04 	sts	0x0480, r24
     8a8:	0a c0       	rjmp	.+20     	; 0x8be <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch)==0) {
			sei();
     8aa:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ac:	86 ef       	ldi	r24, 0xF6	; 246
     8ae:	8a 95       	dec	r24
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <uart_putchar+0x28>
			_delay_us(100);
			cli();
     8b2:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy=1;
	}
	else {
		while(qo_insert(ch)==0) {
     8b4:	8c 2f       	mov	r24, r28
     8b6:	0e 94 39 03 	call	0x672	; 0x672 <qo_insert>
     8ba:	00 97       	sbiw	r24, 0x00	; 0
     8bc:	b1 f3       	breq	.-20     	; 0x8aa <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     8be:	78 94       	sei
	return(1);
}
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <uart_getchar>:
// this
int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     8c8:	f8 94       	cli
		ch=qi_delete();
     8ca:	0e 94 1c 03 	call	0x638	; 0x638 <qi_delete>
		sei();
     8ce:	78 94       	sei
	} while(ch==0);
     8d0:	88 23       	and	r24, r24
     8d2:	d1 f3       	breq	.-12     	; 0x8c8 <uart_getchar>

	if(ch==ETX) return(-1);
     8d4:	84 30       	cpi	r24, 0x04	; 4
     8d6:	11 f0       	breq	.+4      	; 0x8dc <uart_getchar+0x14>
	else return(ch);
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	08 95       	ret
		cli();
		ch=qi_delete();
		sei();
	} while(ch==0);

	if(ch==ETX) return(-1);
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	9f ef       	ldi	r25, 0xFF	; 255
	else return(ch);
}
     8e0:	08 95       	ret

000008e2 <uart_init>:
FILE Mystdout = FDEV_SETUP_STREAM (uart_putchar, NULL,_FDEV_SETUP_WRITE);
FILE Mystdin = FDEV_SETUP_STREAM (NULL,uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init() {
	stdin = &Mystdin;
     8e2:	8a e4       	ldi	r24, 0x4A	; 74
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	90 93 c6 04 	sts	0x04C6, r25
     8ea:	80 93 c5 04 	sts	0x04C5, r24
	stdout = &Mystdout;
     8ee:	88 e5       	ldi	r24, 0x58	; 88
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	90 93 c8 04 	sts	0x04C8, r25
     8f6:	80 93 c7 04 	sts	0x04C7, r24
	q_init();
     8fa:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <q_init>
	uart_busy=0;
     8fe:	10 92 80 04 	sts	0x0480, r1
	UBRR0H=0x00; UBRR0L=0x07;
     902:	10 92 c5 00 	sts	0x00C5, r1
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A,U2X0);
     90c:	e0 ec       	ldi	r30, 0xC0	; 192
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	82 60       	ori	r24, 0x02	; 2
     914:	80 83       	st	Z, r24
	sbi(UCSR0B,TXEN0);
     916:	e1 ec       	ldi	r30, 0xC1	; 193
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	88 60       	ori	r24, 0x08	; 8
     91e:	80 83       	st	Z, r24
	sbi(UCSR0B,TXCIE0);
     920:	80 81       	ld	r24, Z
     922:	80 64       	ori	r24, 0x40	; 64
     924:	80 83       	st	Z, r24
	sbi(UCSR0B,RXEN0);
     926:	80 81       	ld	r24, Z
     928:	80 61       	ori	r24, 0x10	; 16
     92a:	80 83       	st	Z, r24
	sbi(UCSR0B,RXCIE0);
     92c:	80 81       	ld	r24, Z
     92e:	80 68       	ori	r24, 0x80	; 128
     930:	80 83       	st	Z, r24
}
     932:	08 95       	ret

00000934 <__vector_27>:
		}
	}
	sei();
	return(1);
}
ISR(USART0_TX_vect) {
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	0b b6       	in	r0, 0x3b	; 59
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	4f 93       	push	r20
     948:	5f 93       	push	r21
     94a:	6f 93       	push	r22
     94c:	7f 93       	push	r23
     94e:	8f 93       	push	r24
     950:	9f 93       	push	r25
     952:	af 93       	push	r26
     954:	bf 93       	push	r27
     956:	ef 93       	push	r30
     958:	ff 93       	push	r31
	char ch;

	if((ch=qo_delete())==0)
     95a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <qo_delete>
     95e:	88 23       	and	r24, r24
     960:	19 f4       	brne	.+6      	; 0x968 <__vector_27+0x34>
		uart_busy=0;
     962:	10 92 80 04 	sts	0x0480, r1
     966:	02 c0       	rjmp	.+4      	; 0x96c <__vector_27+0x38>
	else
		UDR0=ch;
     968:	80 93 c6 00 	sts	0x00C6, r24
}
     96c:	ff 91       	pop	r31
     96e:	ef 91       	pop	r30
     970:	bf 91       	pop	r27
     972:	af 91       	pop	r26
     974:	9f 91       	pop	r25
     976:	8f 91       	pop	r24
     978:	7f 91       	pop	r23
     97a:	6f 91       	pop	r22
     97c:	5f 91       	pop	r21
     97e:	4f 91       	pop	r20
     980:	3f 91       	pop	r19
     982:	2f 91       	pop	r18
     984:	0f 90       	pop	r0
     986:	0b be       	out	0x3b, r0	; 59
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <uart_echo>:
			ch='\n';
		uart_echo(ch);
	}
	qi_insert(ch);
}
void uart_echo(char ch) {
     992:	cf 93       	push	r28
     994:	c8 2f       	mov	r28, r24
	if(ch=='\n') uart_echo('\r');
     996:	8a 30       	cpi	r24, 0x0A	; 10
     998:	19 f4       	brne	.+6      	; 0x9a0 <uart_echo+0xe>
     99a:	8d e0       	ldi	r24, 0x0D	; 13
     99c:	0e 94 c9 04 	call	0x992	; 0x992 <uart_echo>

	if(!uart_busy) {
     9a0:	80 91 80 04 	lds	r24, 0x0480
     9a4:	88 23       	and	r24, r24
     9a6:	31 f4       	brne	.+12     	; 0x9b4 <uart_echo+0x22>
		UDR0=ch;
     9a8:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy=1;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	80 93 80 04 	sts	0x0480, r24
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     9b4:	8c 2f       	mov	r24, r28
     9b6:	0e 94 39 03 	call	0x672	; 0x672 <qo_insert>
}
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <__vector_25>:
		uart_busy=0;
	else
		UDR0=ch;
}
//
ISR(USART0_RX_vect) {
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	0b b6       	in	r0, 0x3b	; 59
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	cf 93       	push	r28
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
	char ch;

	ch=UDR0;
     9e6:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch!=ETX) {
     9ea:	c4 30       	cpi	r28, 0x04	; 4
     9ec:	31 f0       	breq	.+12     	; 0x9fa <__vector_25+0x3c>
		if(ch=='\r')
     9ee:	cd 30       	cpi	r28, 0x0D	; 13
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <__vector_25+0x36>
			ch='\n';
     9f2:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     9f4:	8c 2f       	mov	r24, r28
     9f6:	0e 94 c9 04 	call	0x992	; 0x992 <uart_echo>
	}
	qi_insert(ch);
     9fa:	8c 2f       	mov	r24, r28
     9fc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <qi_insert>
}
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	cf 91       	pop	r28
     a06:	bf 91       	pop	r27
     a08:	af 91       	pop	r26
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	7f 91       	pop	r23
     a10:	6f 91       	pop	r22
     a12:	5f 91       	pop	r21
     a14:	4f 91       	pop	r20
     a16:	3f 91       	pop	r19
     a18:	2f 91       	pop	r18
     a1a:	0f 90       	pop	r0
     a1c:	0b be       	out	0x3b, r0	; 59
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <uart_putchar_1>:
	}
	else
		qo_insert(ch);
}
	
int uart_putchar_1(char ch, FILE *stream) {
     a28:	cf 93       	push	r28
     a2a:	c8 2f       	mov	r28, r24
	if(ch=='\n')
     a2c:	8a 30       	cpi	r24, 0x0A	; 10
     a2e:	19 f4       	brne	.+6      	; 0xa36 <uart_putchar_1+0xe>
		uart_putchar_1('\r',stream);
     a30:	8d e0       	ldi	r24, 0x0D	; 13
     a32:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_putchar_1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a36:	83 e3       	ldi	r24, 0x33	; 51
     a38:	97 e0       	ldi	r25, 0x07	; 7
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <uart_putchar_1+0x12>
	_delay_ms(1);
	UDR0=ch;
     a3e:	c0 93 c6 00 	sts	0x00C6, r28
	return(1);
}
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <uart_putchar_2>:

int uart_putchar_2(char ch, FILE *stream) {
     a4a:	cf 93       	push	r28
     a4c:	c8 2f       	mov	r28, r24
	if(ch=='\n')
     a4e:	8a 30       	cpi	r24, 0x0A	; 10
     a50:	39 f4       	brne	.+14     	; 0xa60 <uart_putchar_2+0x16>
		uart_putchar_2('\r',stdout);
     a52:	60 91 c7 04 	lds	r22, 0x04C7
     a56:	70 91 c8 04 	lds	r23, 0x04C8
     a5a:	8d e0       	ldi	r24, 0x0D	; 13
     a5c:	0e 94 25 05 	call	0xa4a	; 0xa4a <uart_putchar_2>
	while(!(UCSR0A & (1<<UDRE0)))
     a60:	80 91 c0 00 	lds	r24, 0x00C0
     a64:	85 ff       	sbrs	r24, 5
     a66:	fc cf       	rjmp	.-8      	; 0xa60 <uart_putchar_2+0x16>
		;
	UDR0=ch;
     a68:	c0 93 c6 00 	sts	0x00C6, r28
	return(1);
}
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <main>:
		pr_time(60);
	}
	return(0);
	*/
	int sec = 0;
	uart_init();
     a74:	0e 94 71 04 	call	0x8e2	; 0x8e2 <uart_init>
	timer2_init();
     a78:	0e 94 96 00 	call	0x12c	; 0x12c <timer2_init>
	sei();
     a7c:	78 94       	sei
		}
		pr_time(60);
	}
	return(0);
	*/
	int sec = 0;
     a7e:	c0 e0       	ldi	r28, 0x00	; 0
     a80:	d0 e0       	ldi	r29, 0x00	; 0
	uart_init();
	timer2_init();
	sei();
	while(1){
		while(!time_flag);
     a82:	80 91 7f 04 	lds	r24, 0x047F
     a86:	88 23       	and	r24, r24
     a88:	e1 f3       	breq	.-8      	; 0xa82 <main+0xe>
		time_flag = 0;
     a8a:	10 92 7f 04 	sts	0x047F, r1
		sec++;
     a8e:	21 96       	adiw	r28, 0x01	; 1
		pr_time(sec);
     a90:	ce 01       	movw	r24, r28
     a92:	0e 94 c9 00 	call	0x192	; 0x192 <pr_time>
		}
     a96:	f5 cf       	rjmp	.-22     	; 0xa82 <main+0xe>

00000a98 <__divmodhi4>:
     a98:	97 fb       	bst	r25, 7
     a9a:	09 2e       	mov	r0, r25
     a9c:	07 26       	eor	r0, r23
     a9e:	0a d0       	rcall	.+20     	; 0xab4 <__divmodhi4_neg1>
     aa0:	77 fd       	sbrc	r23, 7
     aa2:	04 d0       	rcall	.+8      	; 0xaac <__divmodhi4_neg2>
     aa4:	0c d0       	rcall	.+24     	; 0xabe <__udivmodhi4>
     aa6:	06 d0       	rcall	.+12     	; 0xab4 <__divmodhi4_neg1>
     aa8:	00 20       	and	r0, r0
     aaa:	1a f4       	brpl	.+6      	; 0xab2 <__divmodhi4_exit>

00000aac <__divmodhi4_neg2>:
     aac:	70 95       	com	r23
     aae:	61 95       	neg	r22
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ab2 <__divmodhi4_exit>:
     ab2:	08 95       	ret

00000ab4 <__divmodhi4_neg1>:
     ab4:	f6 f7       	brtc	.-4      	; 0xab2 <__divmodhi4_exit>
     ab6:	90 95       	com	r25
     ab8:	81 95       	neg	r24
     aba:	9f 4f       	sbci	r25, 0xFF	; 255
     abc:	08 95       	ret

00000abe <__udivmodhi4>:
     abe:	aa 1b       	sub	r26, r26
     ac0:	bb 1b       	sub	r27, r27
     ac2:	51 e1       	ldi	r21, 0x11	; 17
     ac4:	07 c0       	rjmp	.+14     	; 0xad4 <__udivmodhi4_ep>

00000ac6 <__udivmodhi4_loop>:
     ac6:	aa 1f       	adc	r26, r26
     ac8:	bb 1f       	adc	r27, r27
     aca:	a6 17       	cp	r26, r22
     acc:	b7 07       	cpc	r27, r23
     ace:	10 f0       	brcs	.+4      	; 0xad4 <__udivmodhi4_ep>
     ad0:	a6 1b       	sub	r26, r22
     ad2:	b7 0b       	sbc	r27, r23

00000ad4 <__udivmodhi4_ep>:
     ad4:	88 1f       	adc	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	5a 95       	dec	r21
     ada:	a9 f7       	brne	.-22     	; 0xac6 <__udivmodhi4_loop>
     adc:	80 95       	com	r24
     ade:	90 95       	com	r25
     ae0:	bc 01       	movw	r22, r24
     ae2:	cd 01       	movw	r24, r26
     ae4:	08 95       	ret

00000ae6 <malloc>:
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	ac 01       	movw	r20, r24
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	91 05       	cpc	r25, r1
     af0:	10 f4       	brcc	.+4      	; 0xaf6 <malloc+0x10>
     af2:	42 e0       	ldi	r20, 0x02	; 2
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	e0 91 c3 04 	lds	r30, 0x04C3
     afa:	f0 91 c4 04 	lds	r31, 0x04C4
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	a0 e0       	ldi	r26, 0x00	; 0
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	24 c0       	rjmp	.+72     	; 0xb50 <malloc+0x6a>
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	84 17       	cp	r24, r20
     b0e:	95 07       	cpc	r25, r21
     b10:	d0 f0       	brcs	.+52     	; 0xb46 <malloc+0x60>
     b12:	84 17       	cp	r24, r20
     b14:	95 07       	cpc	r25, r21
     b16:	71 f4       	brne	.+28     	; 0xb34 <malloc+0x4e>
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	10 97       	sbiw	r26, 0x00	; 0
     b1e:	29 f0       	breq	.+10     	; 0xb2a <malloc+0x44>
     b20:	13 96       	adiw	r26, 0x03	; 3
     b22:	9c 93       	st	X, r25
     b24:	8e 93       	st	-X, r24
     b26:	12 97       	sbiw	r26, 0x02	; 2
     b28:	2c c0       	rjmp	.+88     	; 0xb82 <malloc+0x9c>
     b2a:	90 93 c4 04 	sts	0x04C4, r25
     b2e:	80 93 c3 04 	sts	0x04C3, r24
     b32:	27 c0       	rjmp	.+78     	; 0xb82 <malloc+0x9c>
     b34:	21 15       	cp	r18, r1
     b36:	31 05       	cpc	r19, r1
     b38:	19 f0       	breq	.+6      	; 0xb40 <malloc+0x5a>
     b3a:	82 17       	cp	r24, r18
     b3c:	93 07       	cpc	r25, r19
     b3e:	18 f4       	brcc	.+6      	; 0xb46 <malloc+0x60>
     b40:	9c 01       	movw	r18, r24
     b42:	bd 01       	movw	r22, r26
     b44:	ef 01       	movw	r28, r30
     b46:	92 81       	ldd	r25, Z+2	; 0x02
     b48:	83 81       	ldd	r24, Z+3	; 0x03
     b4a:	df 01       	movw	r26, r30
     b4c:	e9 2f       	mov	r30, r25
     b4e:	f8 2f       	mov	r31, r24
     b50:	30 97       	sbiw	r30, 0x00	; 0
     b52:	d1 f6       	brne	.-76     	; 0xb08 <malloc+0x22>
     b54:	21 15       	cp	r18, r1
     b56:	31 05       	cpc	r19, r1
     b58:	f9 f0       	breq	.+62     	; 0xb98 <malloc+0xb2>
     b5a:	c9 01       	movw	r24, r18
     b5c:	84 1b       	sub	r24, r20
     b5e:	95 0b       	sbc	r25, r21
     b60:	84 30       	cpi	r24, 0x04	; 4
     b62:	91 05       	cpc	r25, r1
     b64:	80 f4       	brcc	.+32     	; 0xb86 <malloc+0xa0>
     b66:	8a 81       	ldd	r24, Y+2	; 0x02
     b68:	9b 81       	ldd	r25, Y+3	; 0x03
     b6a:	61 15       	cp	r22, r1
     b6c:	71 05       	cpc	r23, r1
     b6e:	21 f0       	breq	.+8      	; 0xb78 <malloc+0x92>
     b70:	fb 01       	movw	r30, r22
     b72:	93 83       	std	Z+3, r25	; 0x03
     b74:	82 83       	std	Z+2, r24	; 0x02
     b76:	04 c0       	rjmp	.+8      	; 0xb80 <malloc+0x9a>
     b78:	90 93 c4 04 	sts	0x04C4, r25
     b7c:	80 93 c3 04 	sts	0x04C3, r24
     b80:	fe 01       	movw	r30, r28
     b82:	32 96       	adiw	r30, 0x02	; 2
     b84:	42 c0       	rjmp	.+132    	; 0xc0a <malloc+0x124>
     b86:	fe 01       	movw	r30, r28
     b88:	e8 0f       	add	r30, r24
     b8a:	f9 1f       	adc	r31, r25
     b8c:	41 93       	st	Z+, r20
     b8e:	51 93       	st	Z+, r21
     b90:	02 97       	sbiw	r24, 0x02	; 2
     b92:	99 83       	std	Y+1, r25	; 0x01
     b94:	88 83       	st	Y, r24
     b96:	39 c0       	rjmp	.+114    	; 0xc0a <malloc+0x124>
     b98:	80 91 c1 04 	lds	r24, 0x04C1
     b9c:	90 91 c2 04 	lds	r25, 0x04C2
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	41 f4       	brne	.+16     	; 0xbb4 <malloc+0xce>
     ba4:	80 91 6a 02 	lds	r24, 0x026A
     ba8:	90 91 6b 02 	lds	r25, 0x026B
     bac:	90 93 c2 04 	sts	0x04C2, r25
     bb0:	80 93 c1 04 	sts	0x04C1, r24
     bb4:	20 91 68 02 	lds	r18, 0x0268
     bb8:	30 91 69 02 	lds	r19, 0x0269
     bbc:	21 15       	cp	r18, r1
     bbe:	31 05       	cpc	r19, r1
     bc0:	41 f4       	brne	.+16     	; 0xbd2 <malloc+0xec>
     bc2:	2d b7       	in	r18, 0x3d	; 61
     bc4:	3e b7       	in	r19, 0x3e	; 62
     bc6:	80 91 6c 02 	lds	r24, 0x026C
     bca:	90 91 6d 02 	lds	r25, 0x026D
     bce:	28 1b       	sub	r18, r24
     bd0:	39 0b       	sbc	r19, r25
     bd2:	e0 91 c1 04 	lds	r30, 0x04C1
     bd6:	f0 91 c2 04 	lds	r31, 0x04C2
     bda:	e2 17       	cp	r30, r18
     bdc:	f3 07       	cpc	r31, r19
     bde:	98 f4       	brcc	.+38     	; 0xc06 <malloc+0x120>
     be0:	2e 1b       	sub	r18, r30
     be2:	3f 0b       	sbc	r19, r31
     be4:	24 17       	cp	r18, r20
     be6:	35 07       	cpc	r19, r21
     be8:	70 f0       	brcs	.+28     	; 0xc06 <malloc+0x120>
     bea:	ca 01       	movw	r24, r20
     bec:	02 96       	adiw	r24, 0x02	; 2
     bee:	28 17       	cp	r18, r24
     bf0:	39 07       	cpc	r19, r25
     bf2:	48 f0       	brcs	.+18     	; 0xc06 <malloc+0x120>
     bf4:	8e 0f       	add	r24, r30
     bf6:	9f 1f       	adc	r25, r31
     bf8:	90 93 c2 04 	sts	0x04C2, r25
     bfc:	80 93 c1 04 	sts	0x04C1, r24
     c00:	41 93       	st	Z+, r20
     c02:	51 93       	st	Z+, r21
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <malloc+0x124>
     c06:	e0 e0       	ldi	r30, 0x00	; 0
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	cf 01       	movw	r24, r30
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <free>:
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	9c 01       	movw	r18, r24
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	09 f4       	brne	.+2      	; 0xc22 <free+0x10>
     c20:	8c c0       	rjmp	.+280    	; 0xd3a <free+0x128>
     c22:	dc 01       	movw	r26, r24
     c24:	12 97       	sbiw	r26, 0x02	; 2
     c26:	13 96       	adiw	r26, 0x03	; 3
     c28:	1c 92       	st	X, r1
     c2a:	1e 92       	st	-X, r1
     c2c:	12 97       	sbiw	r26, 0x02	; 2
     c2e:	60 91 c3 04 	lds	r22, 0x04C3
     c32:	70 91 c4 04 	lds	r23, 0x04C4
     c36:	61 15       	cp	r22, r1
     c38:	71 05       	cpc	r23, r1
     c3a:	89 f4       	brne	.+34     	; 0xc5e <free+0x4c>
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	11 97       	sbiw	r26, 0x01	; 1
     c42:	82 0f       	add	r24, r18
     c44:	93 1f       	adc	r25, r19
     c46:	20 91 c1 04 	lds	r18, 0x04C1
     c4a:	30 91 c2 04 	lds	r19, 0x04C2
     c4e:	28 17       	cp	r18, r24
     c50:	39 07       	cpc	r19, r25
     c52:	69 f5       	brne	.+90     	; 0xcae <free+0x9c>
     c54:	b0 93 c2 04 	sts	0x04C2, r27
     c58:	a0 93 c1 04 	sts	0x04C1, r26
     c5c:	6e c0       	rjmp	.+220    	; 0xd3a <free+0x128>
     c5e:	fb 01       	movw	r30, r22
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <free+0x56>
     c66:	fc 01       	movw	r30, r24
     c68:	ea 17       	cp	r30, r26
     c6a:	fb 07       	cpc	r31, r27
     c6c:	30 f4       	brcc	.+12     	; 0xc7a <free+0x68>
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	af 01       	movw	r20, r30
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	b9 f7       	brne	.-18     	; 0xc66 <free+0x54>
     c78:	1f c0       	rjmp	.+62     	; 0xcb8 <free+0xa6>
     c7a:	e9 01       	movw	r28, r18
     c7c:	22 97       	sbiw	r28, 0x02	; 2
     c7e:	fb 83       	std	Y+3, r31	; 0x03
     c80:	ea 83       	std	Y+2, r30	; 0x02
     c82:	08 81       	ld	r16, Y
     c84:	19 81       	ldd	r17, Y+1	; 0x01
     c86:	c9 01       	movw	r24, r18
     c88:	80 0f       	add	r24, r16
     c8a:	91 1f       	adc	r25, r17
     c8c:	8e 17       	cp	r24, r30
     c8e:	9f 07       	cpc	r25, r31
     c90:	59 f4       	brne	.+22     	; 0xca8 <free+0x96>
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	80 0f       	add	r24, r16
     c98:	91 1f       	adc	r25, r17
     c9a:	02 96       	adiw	r24, 0x02	; 2
     c9c:	99 83       	std	Y+1, r25	; 0x01
     c9e:	88 83       	st	Y, r24
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	9b 83       	std	Y+3, r25	; 0x03
     ca6:	8a 83       	std	Y+2, r24	; 0x02
     ca8:	41 15       	cp	r20, r1
     caa:	51 05       	cpc	r21, r1
     cac:	29 f4       	brne	.+10     	; 0xcb8 <free+0xa6>
     cae:	b0 93 c4 04 	sts	0x04C4, r27
     cb2:	a0 93 c3 04 	sts	0x04C3, r26
     cb6:	41 c0       	rjmp	.+130    	; 0xd3a <free+0x128>
     cb8:	fa 01       	movw	r30, r20
     cba:	b3 83       	std	Z+3, r27	; 0x03
     cbc:	a2 83       	std	Z+2, r26	; 0x02
     cbe:	c1 91       	ld	r28, Z+
     cc0:	d1 91       	ld	r29, Z+
     cc2:	ec 0f       	add	r30, r28
     cc4:	fd 1f       	adc	r31, r29
     cc6:	ae 17       	cp	r26, r30
     cc8:	bf 07       	cpc	r27, r31
     cca:	81 f4       	brne	.+32     	; 0xcec <free+0xda>
     ccc:	f9 01       	movw	r30, r18
     cce:	92 91       	ld	r25, -Z
     cd0:	82 91       	ld	r24, -Z
     cd2:	8c 0f       	add	r24, r28
     cd4:	9d 1f       	adc	r25, r29
     cd6:	02 96       	adiw	r24, 0x02	; 2
     cd8:	da 01       	movw	r26, r20
     cda:	11 96       	adiw	r26, 0x01	; 1
     cdc:	9c 93       	st	X, r25
     cde:	8e 93       	st	-X, r24
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	13 96       	adiw	r26, 0x03	; 3
     ce6:	9c 93       	st	X, r25
     ce8:	8e 93       	st	-X, r24
     cea:	12 97       	sbiw	r26, 0x02	; 2
     cec:	e0 e0       	ldi	r30, 0x00	; 0
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <free+0xe4>
     cf2:	fb 01       	movw	r30, r22
     cf4:	bc 01       	movw	r22, r24
     cf6:	db 01       	movw	r26, r22
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	8d 91       	ld	r24, X+
     cfc:	9c 91       	ld	r25, X
     cfe:	13 97       	sbiw	r26, 0x03	; 3
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	b9 f7       	brne	.-18     	; 0xcf2 <free+0xe0>
     d04:	cb 01       	movw	r24, r22
     d06:	02 96       	adiw	r24, 0x02	; 2
     d08:	2d 91       	ld	r18, X+
     d0a:	3c 91       	ld	r19, X
     d0c:	11 97       	sbiw	r26, 0x01	; 1
     d0e:	82 0f       	add	r24, r18
     d10:	93 1f       	adc	r25, r19
     d12:	20 91 c1 04 	lds	r18, 0x04C1
     d16:	30 91 c2 04 	lds	r19, 0x04C2
     d1a:	28 17       	cp	r18, r24
     d1c:	39 07       	cpc	r19, r25
     d1e:	69 f4       	brne	.+26     	; 0xd3a <free+0x128>
     d20:	30 97       	sbiw	r30, 0x00	; 0
     d22:	29 f4       	brne	.+10     	; 0xd2e <free+0x11c>
     d24:	10 92 c4 04 	sts	0x04C4, r1
     d28:	10 92 c3 04 	sts	0x04C3, r1
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <free+0x120>
     d2e:	13 82       	std	Z+3, r1	; 0x03
     d30:	12 82       	std	Z+2, r1	; 0x02
     d32:	70 93 c2 04 	sts	0x04C2, r23
     d36:	60 93 c1 04 	sts	0x04C1, r22
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	08 95       	ret

00000d44 <atoi>:
     d44:	fc 01       	movw	r30, r24
     d46:	88 27       	eor	r24, r24
     d48:	99 27       	eor	r25, r25
     d4a:	e8 94       	clt
     d4c:	21 91       	ld	r18, Z+
     d4e:	20 32       	cpi	r18, 0x20	; 32
     d50:	e9 f3       	breq	.-6      	; 0xd4c <atoi+0x8>
     d52:	29 30       	cpi	r18, 0x09	; 9
     d54:	10 f0       	brcs	.+4      	; 0xd5a <atoi+0x16>
     d56:	2e 30       	cpi	r18, 0x0E	; 14
     d58:	c8 f3       	brcs	.-14     	; 0xd4c <atoi+0x8>
     d5a:	2b 32       	cpi	r18, 0x2B	; 43
     d5c:	41 f0       	breq	.+16     	; 0xd6e <atoi+0x2a>
     d5e:	2d 32       	cpi	r18, 0x2D	; 45
     d60:	39 f4       	brne	.+14     	; 0xd70 <atoi+0x2c>
     d62:	68 94       	set
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <atoi+0x2a>
     d66:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulhi_const_10>
     d6a:	82 0f       	add	r24, r18
     d6c:	91 1d       	adc	r25, r1
     d6e:	21 91       	ld	r18, Z+
     d70:	20 53       	subi	r18, 0x30	; 48
     d72:	2a 30       	cpi	r18, 0x0A	; 10
     d74:	c0 f3       	brcs	.-16     	; 0xd66 <atoi+0x22>
     d76:	1e f4       	brtc	.+6      	; 0xd7e <atoi+0x3a>
     d78:	90 95       	com	r25
     d7a:	81 95       	neg	r24
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	08 95       	ret

00000d80 <strcmp>:
     d80:	fb 01       	movw	r30, r22
     d82:	dc 01       	movw	r26, r24
     d84:	8d 91       	ld	r24, X+
     d86:	01 90       	ld	r0, Z+
     d88:	80 19       	sub	r24, r0
     d8a:	01 10       	cpse	r0, r1
     d8c:	d9 f3       	breq	.-10     	; 0xd84 <strcmp+0x4>
     d8e:	99 0b       	sbc	r25, r25
     d90:	08 95       	ret

00000d92 <strcpy>:
     d92:	fb 01       	movw	r30, r22
     d94:	dc 01       	movw	r26, r24
     d96:	01 90       	ld	r0, Z+
     d98:	0d 92       	st	X+, r0
     d9a:	00 20       	and	r0, r0
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <strcpy+0x4>
     d9e:	08 95       	ret

00000da0 <__mulhi_const_10>:
     da0:	7a e0       	ldi	r23, 0x0A	; 10
     da2:	97 9f       	mul	r25, r23
     da4:	90 2d       	mov	r25, r0
     da6:	87 9f       	mul	r24, r23
     da8:	80 2d       	mov	r24, r0
     daa:	91 0d       	add	r25, r1
     dac:	11 24       	eor	r1, r1
     dae:	08 95       	ret

00000db0 <fgets>:
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	8c 01       	movw	r16, r24
     dc2:	6a 01       	movw	r12, r20
     dc4:	fa 01       	movw	r30, r20
     dc6:	83 81       	ldd	r24, Z+3	; 0x03
     dc8:	80 ff       	sbrs	r24, 0
     dca:	1a c0       	rjmp	.+52     	; 0xe00 <fgets+0x50>
     dcc:	16 16       	cp	r1, r22
     dce:	17 06       	cpc	r1, r23
     dd0:	bc f4       	brge	.+46     	; 0xe00 <fgets+0x50>
     dd2:	7b 01       	movw	r14, r22
     dd4:	e8 01       	movw	r28, r16
     dd6:	0e c0       	rjmp	.+28     	; 0xdf4 <fgets+0x44>
     dd8:	c6 01       	movw	r24, r12
     dda:	0e 94 42 09 	call	0x1284	; 0x1284 <fgetc>
     dde:	ff ef       	ldi	r31, 0xFF	; 255
     de0:	8f 3f       	cpi	r24, 0xFF	; 255
     de2:	9f 07       	cpc	r25, r31
     de4:	69 f0       	breq	.+26     	; 0xe00 <fgets+0x50>
     de6:	89 93       	st	Y+, r24
     de8:	08 94       	sec
     dea:	e1 08       	sbc	r14, r1
     dec:	f1 08       	sbc	r15, r1
     dee:	8a 30       	cpi	r24, 0x0A	; 10
     df0:	91 05       	cpc	r25, r1
     df2:	21 f0       	breq	.+8      	; 0xdfc <fgets+0x4c>
     df4:	21 e0       	ldi	r18, 0x01	; 1
     df6:	e2 16       	cp	r14, r18
     df8:	f1 04       	cpc	r15, r1
     dfa:	71 f7       	brne	.-36     	; 0xdd8 <fgets+0x28>
     dfc:	18 82       	st	Y, r1
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <fgets+0x54>
     e00:	00 e0       	ldi	r16, 0x00	; 0
     e02:	10 e0       	ldi	r17, 0x00	; 0
     e04:	c8 01       	movw	r24, r16
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	08 95       	ret

00000e18 <printf>:
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	fe 01       	movw	r30, r28
     e22:	36 96       	adiw	r30, 0x06	; 6
     e24:	61 91       	ld	r22, Z+
     e26:	71 91       	ld	r23, Z+
     e28:	80 91 c7 04 	lds	r24, 0x04C7
     e2c:	90 91 c8 04 	lds	r25, 0x04C8
     e30:	af 01       	movw	r20, r30
     e32:	0e 94 25 07 	call	0xe4a	; 0xe4a <vfprintf>
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <putchar>:
     e3c:	60 91 c7 04 	lds	r22, 0x04C7
     e40:	70 91 c8 04 	lds	r23, 0x04C8
     e44:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
     e48:	08 95       	ret

00000e4a <vfprintf>:
     e4a:	2f 92       	push	r2
     e4c:	3f 92       	push	r3
     e4e:	4f 92       	push	r4
     e50:	5f 92       	push	r5
     e52:	6f 92       	push	r6
     e54:	7f 92       	push	r7
     e56:	8f 92       	push	r8
     e58:	9f 92       	push	r9
     e5a:	af 92       	push	r10
     e5c:	bf 92       	push	r11
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	2d 97       	sbiw	r28, 0x0d	; 13
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	3c 01       	movw	r6, r24
     e80:	7d 87       	std	Y+13, r23	; 0x0d
     e82:	6c 87       	std	Y+12, r22	; 0x0c
     e84:	5a 01       	movw	r10, r20
     e86:	fc 01       	movw	r30, r24
     e88:	17 82       	std	Z+7, r1	; 0x07
     e8a:	16 82       	std	Z+6, r1	; 0x06
     e8c:	83 81       	ldd	r24, Z+3	; 0x03
     e8e:	81 ff       	sbrs	r24, 1
     e90:	c8 c1       	rjmp	.+912    	; 0x1222 <vfprintf+0x3d8>
     e92:	2e 01       	movw	r4, r28
     e94:	08 94       	sec
     e96:	41 1c       	adc	r4, r1
     e98:	51 1c       	adc	r5, r1
     e9a:	f3 01       	movw	r30, r6
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	ec 85       	ldd	r30, Y+12	; 0x0c
     ea0:	fd 85       	ldd	r31, Y+13	; 0x0d
     ea2:	93 fd       	sbrc	r25, 3
     ea4:	85 91       	lpm	r24, Z+
     ea6:	93 ff       	sbrs	r25, 3
     ea8:	81 91       	ld	r24, Z+
     eaa:	fd 87       	std	Y+13, r31	; 0x0d
     eac:	ec 87       	std	Y+12, r30	; 0x0c
     eae:	88 23       	and	r24, r24
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <vfprintf+0x6a>
     eb2:	b3 c1       	rjmp	.+870    	; 0x121a <vfprintf+0x3d0>
     eb4:	85 32       	cpi	r24, 0x25	; 37
     eb6:	41 f4       	brne	.+16     	; 0xec8 <vfprintf+0x7e>
     eb8:	93 fd       	sbrc	r25, 3
     eba:	85 91       	lpm	r24, Z+
     ebc:	93 ff       	sbrs	r25, 3
     ebe:	81 91       	ld	r24, Z+
     ec0:	fd 87       	std	Y+13, r31	; 0x0d
     ec2:	ec 87       	std	Y+12, r30	; 0x0c
     ec4:	85 32       	cpi	r24, 0x25	; 37
     ec6:	29 f4       	brne	.+10     	; 0xed2 <vfprintf+0x88>
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	b3 01       	movw	r22, r6
     ecc:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
     ed0:	e4 cf       	rjmp	.-56     	; 0xe9a <vfprintf+0x50>
     ed2:	ff 24       	eor	r15, r15
     ed4:	ee 24       	eor	r14, r14
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	10 32       	cpi	r17, 0x20	; 32
     eda:	b0 f4       	brcc	.+44     	; 0xf08 <vfprintf+0xbe>
     edc:	8b 32       	cpi	r24, 0x2B	; 43
     ede:	69 f0       	breq	.+26     	; 0xefa <vfprintf+0xb0>
     ee0:	8c 32       	cpi	r24, 0x2C	; 44
     ee2:	28 f4       	brcc	.+10     	; 0xeee <vfprintf+0xa4>
     ee4:	80 32       	cpi	r24, 0x20	; 32
     ee6:	51 f0       	breq	.+20     	; 0xefc <vfprintf+0xb2>
     ee8:	83 32       	cpi	r24, 0x23	; 35
     eea:	71 f4       	brne	.+28     	; 0xf08 <vfprintf+0xbe>
     eec:	0b c0       	rjmp	.+22     	; 0xf04 <vfprintf+0xba>
     eee:	8d 32       	cpi	r24, 0x2D	; 45
     ef0:	39 f0       	breq	.+14     	; 0xf00 <vfprintf+0xb6>
     ef2:	80 33       	cpi	r24, 0x30	; 48
     ef4:	49 f4       	brne	.+18     	; 0xf08 <vfprintf+0xbe>
     ef6:	11 60       	ori	r17, 0x01	; 1
     ef8:	2c c0       	rjmp	.+88     	; 0xf52 <vfprintf+0x108>
     efa:	12 60       	ori	r17, 0x02	; 2
     efc:	14 60       	ori	r17, 0x04	; 4
     efe:	29 c0       	rjmp	.+82     	; 0xf52 <vfprintf+0x108>
     f00:	18 60       	ori	r17, 0x08	; 8
     f02:	27 c0       	rjmp	.+78     	; 0xf52 <vfprintf+0x108>
     f04:	10 61       	ori	r17, 0x10	; 16
     f06:	25 c0       	rjmp	.+74     	; 0xf52 <vfprintf+0x108>
     f08:	17 fd       	sbrc	r17, 7
     f0a:	2e c0       	rjmp	.+92     	; 0xf68 <vfprintf+0x11e>
     f0c:	28 2f       	mov	r18, r24
     f0e:	20 53       	subi	r18, 0x30	; 48
     f10:	2a 30       	cpi	r18, 0x0A	; 10
     f12:	98 f4       	brcc	.+38     	; 0xf3a <vfprintf+0xf0>
     f14:	16 ff       	sbrs	r17, 6
     f16:	08 c0       	rjmp	.+16     	; 0xf28 <vfprintf+0xde>
     f18:	8f 2d       	mov	r24, r15
     f1a:	88 0f       	add	r24, r24
     f1c:	f8 2e       	mov	r15, r24
     f1e:	ff 0c       	add	r15, r15
     f20:	ff 0c       	add	r15, r15
     f22:	f8 0e       	add	r15, r24
     f24:	f2 0e       	add	r15, r18
     f26:	15 c0       	rjmp	.+42     	; 0xf52 <vfprintf+0x108>
     f28:	8e 2d       	mov	r24, r14
     f2a:	88 0f       	add	r24, r24
     f2c:	e8 2e       	mov	r14, r24
     f2e:	ee 0c       	add	r14, r14
     f30:	ee 0c       	add	r14, r14
     f32:	e8 0e       	add	r14, r24
     f34:	e2 0e       	add	r14, r18
     f36:	10 62       	ori	r17, 0x20	; 32
     f38:	0c c0       	rjmp	.+24     	; 0xf52 <vfprintf+0x108>
     f3a:	8e 32       	cpi	r24, 0x2E	; 46
     f3c:	21 f4       	brne	.+8      	; 0xf46 <vfprintf+0xfc>
     f3e:	16 fd       	sbrc	r17, 6
     f40:	6c c1       	rjmp	.+728    	; 0x121a <vfprintf+0x3d0>
     f42:	10 64       	ori	r17, 0x40	; 64
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0x108>
     f46:	8c 36       	cpi	r24, 0x6C	; 108
     f48:	11 f4       	brne	.+4      	; 0xf4e <vfprintf+0x104>
     f4a:	10 68       	ori	r17, 0x80	; 128
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x108>
     f4e:	88 36       	cpi	r24, 0x68	; 104
     f50:	59 f4       	brne	.+22     	; 0xf68 <vfprintf+0x11e>
     f52:	ec 85       	ldd	r30, Y+12	; 0x0c
     f54:	fd 85       	ldd	r31, Y+13	; 0x0d
     f56:	93 fd       	sbrc	r25, 3
     f58:	85 91       	lpm	r24, Z+
     f5a:	93 ff       	sbrs	r25, 3
     f5c:	81 91       	ld	r24, Z+
     f5e:	fd 87       	std	Y+13, r31	; 0x0d
     f60:	ec 87       	std	Y+12, r30	; 0x0c
     f62:	88 23       	and	r24, r24
     f64:	09 f0       	breq	.+2      	; 0xf68 <vfprintf+0x11e>
     f66:	b8 cf       	rjmp	.-144    	; 0xed8 <vfprintf+0x8e>
     f68:	98 2f       	mov	r25, r24
     f6a:	95 54       	subi	r25, 0x45	; 69
     f6c:	93 30       	cpi	r25, 0x03	; 3
     f6e:	18 f0       	brcs	.+6      	; 0xf76 <vfprintf+0x12c>
     f70:	90 52       	subi	r25, 0x20	; 32
     f72:	93 30       	cpi	r25, 0x03	; 3
     f74:	38 f4       	brcc	.+14     	; 0xf84 <vfprintf+0x13a>
     f76:	24 e0       	ldi	r18, 0x04	; 4
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	a2 0e       	add	r10, r18
     f7c:	b3 1e       	adc	r11, r19
     f7e:	3f e3       	ldi	r19, 0x3F	; 63
     f80:	39 83       	std	Y+1, r19	; 0x01
     f82:	0f c0       	rjmp	.+30     	; 0xfa2 <vfprintf+0x158>
     f84:	83 36       	cpi	r24, 0x63	; 99
     f86:	31 f0       	breq	.+12     	; 0xf94 <vfprintf+0x14a>
     f88:	83 37       	cpi	r24, 0x73	; 115
     f8a:	81 f0       	breq	.+32     	; 0xfac <vfprintf+0x162>
     f8c:	83 35       	cpi	r24, 0x53	; 83
     f8e:	09 f0       	breq	.+2      	; 0xf92 <vfprintf+0x148>
     f90:	5a c0       	rjmp	.+180    	; 0x1046 <vfprintf+0x1fc>
     f92:	22 c0       	rjmp	.+68     	; 0xfd8 <vfprintf+0x18e>
     f94:	f5 01       	movw	r30, r10
     f96:	80 81       	ld	r24, Z
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	22 e0       	ldi	r18, 0x02	; 2
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	a2 0e       	add	r10, r18
     fa0:	b3 1e       	adc	r11, r19
     fa2:	21 e0       	ldi	r18, 0x01	; 1
     fa4:	c2 2e       	mov	r12, r18
     fa6:	d1 2c       	mov	r13, r1
     fa8:	42 01       	movw	r8, r4
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <vfprintf+0x18a>
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	29 2e       	mov	r2, r25
     fb0:	31 2c       	mov	r3, r1
     fb2:	2a 0c       	add	r2, r10
     fb4:	3b 1c       	adc	r3, r11
     fb6:	f5 01       	movw	r30, r10
     fb8:	80 80       	ld	r8, Z
     fba:	91 80       	ldd	r9, Z+1	; 0x01
     fbc:	16 ff       	sbrs	r17, 6
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <vfprintf+0x17c>
     fc0:	6f 2d       	mov	r22, r15
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0x180>
     fc6:	6f ef       	ldi	r22, 0xFF	; 255
     fc8:	7f ef       	ldi	r23, 0xFF	; 255
     fca:	c4 01       	movw	r24, r8
     fcc:	0e 94 37 09 	call	0x126e	; 0x126e <strnlen>
     fd0:	6c 01       	movw	r12, r24
     fd2:	51 01       	movw	r10, r2
     fd4:	1f 77       	andi	r17, 0x7F	; 127
     fd6:	15 c0       	rjmp	.+42     	; 0x1002 <vfprintf+0x1b8>
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	28 2e       	mov	r2, r24
     fdc:	31 2c       	mov	r3, r1
     fde:	2a 0c       	add	r2, r10
     fe0:	3b 1c       	adc	r3, r11
     fe2:	f5 01       	movw	r30, r10
     fe4:	80 80       	ld	r8, Z
     fe6:	91 80       	ldd	r9, Z+1	; 0x01
     fe8:	16 ff       	sbrs	r17, 6
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <vfprintf+0x1a8>
     fec:	6f 2d       	mov	r22, r15
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <vfprintf+0x1ac>
     ff2:	6f ef       	ldi	r22, 0xFF	; 255
     ff4:	7f ef       	ldi	r23, 0xFF	; 255
     ff6:	c4 01       	movw	r24, r8
     ff8:	0e 94 2c 09 	call	0x1258	; 0x1258 <strnlen_P>
     ffc:	6c 01       	movw	r12, r24
     ffe:	10 68       	ori	r17, 0x80	; 128
    1000:	51 01       	movw	r10, r2
    1002:	13 fd       	sbrc	r17, 3
    1004:	1c c0       	rjmp	.+56     	; 0x103e <vfprintf+0x1f4>
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <vfprintf+0x1ca>
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	b3 01       	movw	r22, r6
    100e:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    1012:	ea 94       	dec	r14
    1014:	8e 2d       	mov	r24, r14
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	c8 16       	cp	r12, r24
    101a:	d9 06       	cpc	r13, r25
    101c:	a8 f3       	brcs	.-22     	; 0x1008 <vfprintf+0x1be>
    101e:	0f c0       	rjmp	.+30     	; 0x103e <vfprintf+0x1f4>
    1020:	f4 01       	movw	r30, r8
    1022:	17 fd       	sbrc	r17, 7
    1024:	85 91       	lpm	r24, Z+
    1026:	17 ff       	sbrs	r17, 7
    1028:	81 91       	ld	r24, Z+
    102a:	4f 01       	movw	r8, r30
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	b3 01       	movw	r22, r6
    1030:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    1034:	e1 10       	cpse	r14, r1
    1036:	ea 94       	dec	r14
    1038:	08 94       	sec
    103a:	c1 08       	sbc	r12, r1
    103c:	d1 08       	sbc	r13, r1
    103e:	c1 14       	cp	r12, r1
    1040:	d1 04       	cpc	r13, r1
    1042:	71 f7       	brne	.-36     	; 0x1020 <vfprintf+0x1d6>
    1044:	e7 c0       	rjmp	.+462    	; 0x1214 <vfprintf+0x3ca>
    1046:	84 36       	cpi	r24, 0x64	; 100
    1048:	11 f0       	breq	.+4      	; 0x104e <vfprintf+0x204>
    104a:	89 36       	cpi	r24, 0x69	; 105
    104c:	51 f5       	brne	.+84     	; 0x10a2 <vfprintf+0x258>
    104e:	f5 01       	movw	r30, r10
    1050:	17 ff       	sbrs	r17, 7
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <vfprintf+0x218>
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	a2 81       	ldd	r26, Z+2	; 0x02
    105a:	b3 81       	ldd	r27, Z+3	; 0x03
    105c:	24 e0       	ldi	r18, 0x04	; 4
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <vfprintf+0x228>
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	aa 27       	eor	r26, r26
    1068:	97 fd       	sbrc	r25, 7
    106a:	a0 95       	com	r26
    106c:	ba 2f       	mov	r27, r26
    106e:	22 e0       	ldi	r18, 0x02	; 2
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	a2 0e       	add	r10, r18
    1074:	b3 1e       	adc	r11, r19
    1076:	01 2f       	mov	r16, r17
    1078:	0f 76       	andi	r16, 0x6F	; 111
    107a:	b7 ff       	sbrs	r27, 7
    107c:	08 c0       	rjmp	.+16     	; 0x108e <vfprintf+0x244>
    107e:	b0 95       	com	r27
    1080:	a0 95       	com	r26
    1082:	90 95       	com	r25
    1084:	81 95       	neg	r24
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	af 4f       	sbci	r26, 0xFF	; 255
    108a:	bf 4f       	sbci	r27, 0xFF	; 255
    108c:	00 68       	ori	r16, 0x80	; 128
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	a2 01       	movw	r20, r4
    1094:	2a e0       	ldi	r18, 0x0A	; 10
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	0e 94 ae 09 	call	0x135c	; 0x135c <__ultoa_invert>
    109c:	d8 2e       	mov	r13, r24
    109e:	d4 18       	sub	r13, r4
    10a0:	3f c0       	rjmp	.+126    	; 0x1120 <vfprintf+0x2d6>
    10a2:	85 37       	cpi	r24, 0x75	; 117
    10a4:	21 f4       	brne	.+8      	; 0x10ae <vfprintf+0x264>
    10a6:	1f 7e       	andi	r17, 0xEF	; 239
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	20 c0       	rjmp	.+64     	; 0x10ee <vfprintf+0x2a4>
    10ae:	19 7f       	andi	r17, 0xF9	; 249
    10b0:	8f 36       	cpi	r24, 0x6F	; 111
    10b2:	a9 f0       	breq	.+42     	; 0x10de <vfprintf+0x294>
    10b4:	80 37       	cpi	r24, 0x70	; 112
    10b6:	20 f4       	brcc	.+8      	; 0x10c0 <vfprintf+0x276>
    10b8:	88 35       	cpi	r24, 0x58	; 88
    10ba:	09 f0       	breq	.+2      	; 0x10be <vfprintf+0x274>
    10bc:	ae c0       	rjmp	.+348    	; 0x121a <vfprintf+0x3d0>
    10be:	0b c0       	rjmp	.+22     	; 0x10d6 <vfprintf+0x28c>
    10c0:	80 37       	cpi	r24, 0x70	; 112
    10c2:	21 f0       	breq	.+8      	; 0x10cc <vfprintf+0x282>
    10c4:	88 37       	cpi	r24, 0x78	; 120
    10c6:	09 f0       	breq	.+2      	; 0x10ca <vfprintf+0x280>
    10c8:	a8 c0       	rjmp	.+336    	; 0x121a <vfprintf+0x3d0>
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <vfprintf+0x284>
    10cc:	10 61       	ori	r17, 0x10	; 16
    10ce:	14 ff       	sbrs	r17, 4
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <vfprintf+0x29a>
    10d2:	14 60       	ori	r17, 0x04	; 4
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <vfprintf+0x29a>
    10d6:	14 ff       	sbrs	r17, 4
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <vfprintf+0x2a0>
    10da:	16 60       	ori	r17, 0x06	; 6
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <vfprintf+0x2a0>
    10de:	28 e0       	ldi	r18, 0x08	; 8
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <vfprintf+0x2a4>
    10e4:	20 e1       	ldi	r18, 0x10	; 16
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <vfprintf+0x2a4>
    10ea:	20 e1       	ldi	r18, 0x10	; 16
    10ec:	32 e0       	ldi	r19, 0x02	; 2
    10ee:	f5 01       	movw	r30, r10
    10f0:	17 ff       	sbrs	r17, 7
    10f2:	07 c0       	rjmp	.+14     	; 0x1102 <vfprintf+0x2b8>
    10f4:	60 81       	ld	r22, Z
    10f6:	71 81       	ldd	r23, Z+1	; 0x01
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	93 81       	ldd	r25, Z+3	; 0x03
    10fc:	44 e0       	ldi	r20, 0x04	; 4
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	06 c0       	rjmp	.+12     	; 0x110e <vfprintf+0x2c4>
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	42 e0       	ldi	r20, 0x02	; 2
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	a4 0e       	add	r10, r20
    1110:	b5 1e       	adc	r11, r21
    1112:	a2 01       	movw	r20, r4
    1114:	0e 94 ae 09 	call	0x135c	; 0x135c <__ultoa_invert>
    1118:	d8 2e       	mov	r13, r24
    111a:	d4 18       	sub	r13, r4
    111c:	01 2f       	mov	r16, r17
    111e:	0f 77       	andi	r16, 0x7F	; 127
    1120:	06 ff       	sbrs	r16, 6
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <vfprintf+0x2ec>
    1124:	0e 7f       	andi	r16, 0xFE	; 254
    1126:	df 14       	cp	r13, r15
    1128:	30 f4       	brcc	.+12     	; 0x1136 <vfprintf+0x2ec>
    112a:	04 ff       	sbrs	r16, 4
    112c:	06 c0       	rjmp	.+12     	; 0x113a <vfprintf+0x2f0>
    112e:	02 fd       	sbrc	r16, 2
    1130:	04 c0       	rjmp	.+8      	; 0x113a <vfprintf+0x2f0>
    1132:	0f 7e       	andi	r16, 0xEF	; 239
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0x2f0>
    1136:	1d 2d       	mov	r17, r13
    1138:	01 c0       	rjmp	.+2      	; 0x113c <vfprintf+0x2f2>
    113a:	1f 2d       	mov	r17, r15
    113c:	80 2f       	mov	r24, r16
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	04 ff       	sbrs	r16, 4
    1142:	0c c0       	rjmp	.+24     	; 0x115c <vfprintf+0x312>
    1144:	fe 01       	movw	r30, r28
    1146:	ed 0d       	add	r30, r13
    1148:	f1 1d       	adc	r31, r1
    114a:	20 81       	ld	r18, Z
    114c:	20 33       	cpi	r18, 0x30	; 48
    114e:	11 f4       	brne	.+4      	; 0x1154 <vfprintf+0x30a>
    1150:	09 7e       	andi	r16, 0xE9	; 233
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <vfprintf+0x31c>
    1154:	02 ff       	sbrs	r16, 2
    1156:	06 c0       	rjmp	.+12     	; 0x1164 <vfprintf+0x31a>
    1158:	1e 5f       	subi	r17, 0xFE	; 254
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <vfprintf+0x31c>
    115c:	86 78       	andi	r24, 0x86	; 134
    115e:	90 70       	andi	r25, 0x00	; 0
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	09 f0       	breq	.+2      	; 0x1166 <vfprintf+0x31c>
    1164:	1f 5f       	subi	r17, 0xFF	; 255
    1166:	80 2e       	mov	r8, r16
    1168:	99 24       	eor	r9, r9
    116a:	03 fd       	sbrc	r16, 3
    116c:	12 c0       	rjmp	.+36     	; 0x1192 <vfprintf+0x348>
    116e:	00 ff       	sbrs	r16, 0
    1170:	0d c0       	rjmp	.+26     	; 0x118c <vfprintf+0x342>
    1172:	fd 2c       	mov	r15, r13
    1174:	1e 15       	cp	r17, r14
    1176:	50 f4       	brcc	.+20     	; 0x118c <vfprintf+0x342>
    1178:	fe 0c       	add	r15, r14
    117a:	f1 1a       	sub	r15, r17
    117c:	1e 2d       	mov	r17, r14
    117e:	06 c0       	rjmp	.+12     	; 0x118c <vfprintf+0x342>
    1180:	80 e2       	ldi	r24, 0x20	; 32
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	b3 01       	movw	r22, r6
    1186:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    118a:	1f 5f       	subi	r17, 0xFF	; 255
    118c:	1e 15       	cp	r17, r14
    118e:	c0 f3       	brcs	.-16     	; 0x1180 <vfprintf+0x336>
    1190:	04 c0       	rjmp	.+8      	; 0x119a <vfprintf+0x350>
    1192:	1e 15       	cp	r17, r14
    1194:	10 f4       	brcc	.+4      	; 0x119a <vfprintf+0x350>
    1196:	e1 1a       	sub	r14, r17
    1198:	01 c0       	rjmp	.+2      	; 0x119c <vfprintf+0x352>
    119a:	ee 24       	eor	r14, r14
    119c:	84 fe       	sbrs	r8, 4
    119e:	0f c0       	rjmp	.+30     	; 0x11be <vfprintf+0x374>
    11a0:	80 e3       	ldi	r24, 0x30	; 48
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	b3 01       	movw	r22, r6
    11a6:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    11aa:	82 fe       	sbrs	r8, 2
    11ac:	1f c0       	rjmp	.+62     	; 0x11ec <vfprintf+0x3a2>
    11ae:	81 fe       	sbrs	r8, 1
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <vfprintf+0x36e>
    11b2:	88 e5       	ldi	r24, 0x58	; 88
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	10 c0       	rjmp	.+32     	; 0x11d8 <vfprintf+0x38e>
    11b8:	88 e7       	ldi	r24, 0x78	; 120
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0d c0       	rjmp	.+26     	; 0x11d8 <vfprintf+0x38e>
    11be:	c4 01       	movw	r24, r8
    11c0:	86 78       	andi	r24, 0x86	; 134
    11c2:	90 70       	andi	r25, 0x00	; 0
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	91 f0       	breq	.+36     	; 0x11ec <vfprintf+0x3a2>
    11c8:	81 fc       	sbrc	r8, 1
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <vfprintf+0x386>
    11cc:	80 e2       	ldi	r24, 0x20	; 32
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <vfprintf+0x388>
    11d0:	8b e2       	ldi	r24, 0x2B	; 43
    11d2:	07 fd       	sbrc	r16, 7
    11d4:	8d e2       	ldi	r24, 0x2D	; 45
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	b3 01       	movw	r22, r6
    11da:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <vfprintf+0x3a2>
    11e0:	80 e3       	ldi	r24, 0x30	; 48
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	b3 01       	movw	r22, r6
    11e6:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    11ea:	fa 94       	dec	r15
    11ec:	df 14       	cp	r13, r15
    11ee:	c0 f3       	brcs	.-16     	; 0x11e0 <vfprintf+0x396>
    11f0:	da 94       	dec	r13
    11f2:	f2 01       	movw	r30, r4
    11f4:	ed 0d       	add	r30, r13
    11f6:	f1 1d       	adc	r31, r1
    11f8:	80 81       	ld	r24, Z
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	b3 01       	movw	r22, r6
    11fe:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    1202:	dd 20       	and	r13, r13
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <vfprintf+0x3a6>
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <vfprintf+0x3ca>
    1208:	80 e2       	ldi	r24, 0x20	; 32
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	b3 01       	movw	r22, r6
    120e:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    1212:	ea 94       	dec	r14
    1214:	ee 20       	and	r14, r14
    1216:	c1 f7       	brne	.-16     	; 0x1208 <vfprintf+0x3be>
    1218:	40 ce       	rjmp	.-896    	; 0xe9a <vfprintf+0x50>
    121a:	f3 01       	movw	r30, r6
    121c:	86 81       	ldd	r24, Z+6	; 0x06
    121e:	97 81       	ldd	r25, Z+7	; 0x07
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0x3dc>
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	2d 96       	adiw	r28, 0x0d	; 13
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	7f 90       	pop	r7
    124c:	6f 90       	pop	r6
    124e:	5f 90       	pop	r5
    1250:	4f 90       	pop	r4
    1252:	3f 90       	pop	r3
    1254:	2f 90       	pop	r2
    1256:	08 95       	ret

00001258 <strnlen_P>:
    1258:	fc 01       	movw	r30, r24
    125a:	05 90       	lpm	r0, Z+
    125c:	61 50       	subi	r22, 0x01	; 1
    125e:	70 40       	sbci	r23, 0x00	; 0
    1260:	01 10       	cpse	r0, r1
    1262:	d8 f7       	brcc	.-10     	; 0x125a <strnlen_P+0x2>
    1264:	80 95       	com	r24
    1266:	90 95       	com	r25
    1268:	8e 0f       	add	r24, r30
    126a:	9f 1f       	adc	r25, r31
    126c:	08 95       	ret

0000126e <strnlen>:
    126e:	fc 01       	movw	r30, r24
    1270:	61 50       	subi	r22, 0x01	; 1
    1272:	70 40       	sbci	r23, 0x00	; 0
    1274:	01 90       	ld	r0, Z+
    1276:	01 10       	cpse	r0, r1
    1278:	d8 f7       	brcc	.-10     	; 0x1270 <strnlen+0x2>
    127a:	80 95       	com	r24
    127c:	90 95       	com	r25
    127e:	8e 0f       	add	r24, r30
    1280:	9f 1f       	adc	r25, r31
    1282:	08 95       	ret

00001284 <fgetc>:
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ec 01       	movw	r28, r24
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	20 ff       	sbrs	r18, 0
    128e:	35 c0       	rjmp	.+106    	; 0x12fa <fgetc+0x76>
    1290:	26 ff       	sbrs	r18, 6
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <fgetc+0x22>
    1294:	2f 7b       	andi	r18, 0xBF	; 191
    1296:	2b 83       	std	Y+3, r18	; 0x03
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	9f 81       	ldd	r25, Y+7	; 0x07
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	9f 83       	std	Y+7, r25	; 0x07
    12a0:	8e 83       	std	Y+6, r24	; 0x06
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 c0       	rjmp	.+80     	; 0x12f6 <fgetc+0x72>
    12a6:	22 ff       	sbrs	r18, 2
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <fgetc+0x44>
    12aa:	e8 81       	ld	r30, Y
    12ac:	f9 81       	ldd	r31, Y+1	; 0x01
    12ae:	80 81       	ld	r24, Z
    12b0:	99 27       	eor	r25, r25
    12b2:	87 fd       	sbrc	r24, 7
    12b4:	90 95       	com	r25
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	19 f4       	brne	.+6      	; 0x12c0 <fgetc+0x3c>
    12ba:	20 62       	ori	r18, 0x20	; 32
    12bc:	2b 83       	std	Y+3, r18	; 0x03
    12be:	1d c0       	rjmp	.+58     	; 0x12fa <fgetc+0x76>
    12c0:	31 96       	adiw	r30, 0x01	; 1
    12c2:	f9 83       	std	Y+1, r31	; 0x01
    12c4:	e8 83       	st	Y, r30
    12c6:	11 c0       	rjmp	.+34     	; 0x12ea <fgetc+0x66>
    12c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    12ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    12cc:	ce 01       	movw	r24, r28
    12ce:	19 95       	eicall
    12d0:	97 ff       	sbrs	r25, 7
    12d2:	0b c0       	rjmp	.+22     	; 0x12ea <fgetc+0x66>
    12d4:	2b 81       	ldd	r18, Y+3	; 0x03
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	8f 3f       	cpi	r24, 0xFF	; 255
    12da:	93 07       	cpc	r25, r19
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <fgetc+0x5e>
    12de:	80 e1       	ldi	r24, 0x10	; 16
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <fgetc+0x60>
    12e2:	80 e2       	ldi	r24, 0x20	; 32
    12e4:	82 2b       	or	r24, r18
    12e6:	8b 83       	std	Y+3, r24	; 0x03
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <fgetc+0x76>
    12ea:	2e 81       	ldd	r18, Y+6	; 0x06
    12ec:	3f 81       	ldd	r19, Y+7	; 0x07
    12ee:	2f 5f       	subi	r18, 0xFF	; 255
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	3f 83       	std	Y+7, r19	; 0x07
    12f4:	2e 83       	std	Y+6, r18	; 0x06
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <fgetc+0x7a>
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	9f ef       	ldi	r25, 0xFF	; 255
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <fputc>:
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	8c 01       	movw	r16, r24
    130e:	eb 01       	movw	r28, r22
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	81 ff       	sbrs	r24, 1
    1314:	1b c0       	rjmp	.+54     	; 0x134c <fputc+0x48>
    1316:	82 ff       	sbrs	r24, 2
    1318:	0d c0       	rjmp	.+26     	; 0x1334 <fputc+0x30>
    131a:	2e 81       	ldd	r18, Y+6	; 0x06
    131c:	3f 81       	ldd	r19, Y+7	; 0x07
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	28 17       	cp	r18, r24
    1324:	39 07       	cpc	r19, r25
    1326:	64 f4       	brge	.+24     	; 0x1340 <fputc+0x3c>
    1328:	e8 81       	ld	r30, Y
    132a:	f9 81       	ldd	r31, Y+1	; 0x01
    132c:	01 93       	st	Z+, r16
    132e:	f9 83       	std	Y+1, r31	; 0x01
    1330:	e8 83       	st	Y, r30
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <fputc+0x3c>
    1334:	e8 85       	ldd	r30, Y+8	; 0x08
    1336:	f9 85       	ldd	r31, Y+9	; 0x09
    1338:	80 2f       	mov	r24, r16
    133a:	19 95       	eicall
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	31 f4       	brne	.+12     	; 0x134c <fputc+0x48>
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
    1342:	9f 81       	ldd	r25, Y+7	; 0x07
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	9f 83       	std	Y+7, r25	; 0x07
    1348:	8e 83       	std	Y+6, r24	; 0x06
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <fputc+0x4c>
    134c:	0f ef       	ldi	r16, 0xFF	; 255
    134e:	1f ef       	ldi	r17, 0xFF	; 255
    1350:	c8 01       	movw	r24, r16
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <__ultoa_invert>:
    135c:	fa 01       	movw	r30, r20
    135e:	aa 27       	eor	r26, r26
    1360:	28 30       	cpi	r18, 0x08	; 8
    1362:	51 f1       	breq	.+84     	; 0x13b8 <__ultoa_invert+0x5c>
    1364:	20 31       	cpi	r18, 0x10	; 16
    1366:	81 f1       	breq	.+96     	; 0x13c8 <__ultoa_invert+0x6c>
    1368:	e8 94       	clt
    136a:	6f 93       	push	r22
    136c:	6e 7f       	andi	r22, 0xFE	; 254
    136e:	6e 5f       	subi	r22, 0xFE	; 254
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	8f 4f       	sbci	r24, 0xFF	; 255
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	af 4f       	sbci	r26, 0xFF	; 255
    1378:	b1 e0       	ldi	r27, 0x01	; 1
    137a:	3e d0       	rcall	.+124    	; 0x13f8 <__ultoa_invert+0x9c>
    137c:	b4 e0       	ldi	r27, 0x04	; 4
    137e:	3c d0       	rcall	.+120    	; 0x13f8 <__ultoa_invert+0x9c>
    1380:	67 0f       	add	r22, r23
    1382:	78 1f       	adc	r23, r24
    1384:	89 1f       	adc	r24, r25
    1386:	9a 1f       	adc	r25, r26
    1388:	a1 1d       	adc	r26, r1
    138a:	68 0f       	add	r22, r24
    138c:	79 1f       	adc	r23, r25
    138e:	8a 1f       	adc	r24, r26
    1390:	91 1d       	adc	r25, r1
    1392:	a1 1d       	adc	r26, r1
    1394:	6a 0f       	add	r22, r26
    1396:	71 1d       	adc	r23, r1
    1398:	81 1d       	adc	r24, r1
    139a:	91 1d       	adc	r25, r1
    139c:	a1 1d       	adc	r26, r1
    139e:	20 d0       	rcall	.+64     	; 0x13e0 <__ultoa_invert+0x84>
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <__ultoa_invert+0x48>
    13a2:	68 94       	set
    13a4:	3f 91       	pop	r19
    13a6:	2a e0       	ldi	r18, 0x0A	; 10
    13a8:	26 9f       	mul	r18, r22
    13aa:	11 24       	eor	r1, r1
    13ac:	30 19       	sub	r19, r0
    13ae:	30 5d       	subi	r19, 0xD0	; 208
    13b0:	31 93       	st	Z+, r19
    13b2:	de f6       	brtc	.-74     	; 0x136a <__ultoa_invert+0xe>
    13b4:	cf 01       	movw	r24, r30
    13b6:	08 95       	ret
    13b8:	46 2f       	mov	r20, r22
    13ba:	47 70       	andi	r20, 0x07	; 7
    13bc:	40 5d       	subi	r20, 0xD0	; 208
    13be:	41 93       	st	Z+, r20
    13c0:	b3 e0       	ldi	r27, 0x03	; 3
    13c2:	0f d0       	rcall	.+30     	; 0x13e2 <__ultoa_invert+0x86>
    13c4:	c9 f7       	brne	.-14     	; 0x13b8 <__ultoa_invert+0x5c>
    13c6:	f6 cf       	rjmp	.-20     	; 0x13b4 <__ultoa_invert+0x58>
    13c8:	46 2f       	mov	r20, r22
    13ca:	4f 70       	andi	r20, 0x0F	; 15
    13cc:	40 5d       	subi	r20, 0xD0	; 208
    13ce:	4a 33       	cpi	r20, 0x3A	; 58
    13d0:	18 f0       	brcs	.+6      	; 0x13d8 <__ultoa_invert+0x7c>
    13d2:	49 5d       	subi	r20, 0xD9	; 217
    13d4:	31 fd       	sbrc	r19, 1
    13d6:	40 52       	subi	r20, 0x20	; 32
    13d8:	41 93       	st	Z+, r20
    13da:	02 d0       	rcall	.+4      	; 0x13e0 <__ultoa_invert+0x84>
    13dc:	a9 f7       	brne	.-22     	; 0x13c8 <__ultoa_invert+0x6c>
    13de:	ea cf       	rjmp	.-44     	; 0x13b4 <__ultoa_invert+0x58>
    13e0:	b4 e0       	ldi	r27, 0x04	; 4
    13e2:	a6 95       	lsr	r26
    13e4:	97 95       	ror	r25
    13e6:	87 95       	ror	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	ba 95       	dec	r27
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__ultoa_invert+0x86>
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	61 05       	cpc	r22, r1
    13f4:	71 05       	cpc	r23, r1
    13f6:	08 95       	ret
    13f8:	9b 01       	movw	r18, r22
    13fa:	ac 01       	movw	r20, r24
    13fc:	0a 2e       	mov	r0, r26
    13fe:	06 94       	lsr	r0
    1400:	57 95       	ror	r21
    1402:	47 95       	ror	r20
    1404:	37 95       	ror	r19
    1406:	27 95       	ror	r18
    1408:	ba 95       	dec	r27
    140a:	c9 f7       	brne	.-14     	; 0x13fe <__ultoa_invert+0xa2>
    140c:	62 0f       	add	r22, r18
    140e:	73 1f       	adc	r23, r19
    1410:	84 1f       	adc	r24, r20
    1412:	95 1f       	adc	r25, r21
    1414:	a0 1d       	adc	r26, r0
    1416:	08 95       	ret

00001418 <_exit>:
    1418:	f8 94       	cli

0000141a <__stop_program>:
    141a:	ff cf       	rjmp	.-2      	; 0x141a <__stop_program>
