
Ptj01_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000208  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  0000029c  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000059b  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d4  00000000  00000000  00001043  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c3  00000000  00000000  00001217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000011c  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000137  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000018d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e0       	ldi	r30, 0x08	; 8
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a1 30       	cpi	r26, 0x01	; 1
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
 124:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led>:


void led()
{
	//unit8_t DDRL,PROTL;
	DDRL=0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 0a 01 	sts	0x010A, r24
	PORTL=0x00;
 132:	10 92 0b 01 	sts	0x010B, r1
}
 136:	08 95       	ret

00000138 <led_init>:
void  led_init()
{
	Leds=DDRL = PORTL = 0xff;	// output, off all
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	80 93 0b 01 	sts	0x010B, r24
 13e:	80 93 0a 01 	sts	0x010A, r24
 142:	80 93 00 02 	sts	0x0200, r24
}
 146:	08 95       	ret

00000148 <led_on_all>:

void  led_on_all(void)
{
	Leds = PORTL = 0x00;	// on all leds
 148:	10 92 0b 01 	sts	0x010B, r1
 14c:	10 92 00 02 	sts	0x0200, r1
}//내부변수로 저장해놓는다. 쓰기전에 Leds가 변수인걸 알 수있다.
 150:	08 95       	ret

00000152 <led_off_all>:

void  led_off_all(void)
{
	Leds = PORTL = 0xff;	// off all leds
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	80 93 0b 01 	sts	0x010B, r24
 158:	80 93 00 02 	sts	0x0200, r24
}
 15c:	08 95       	ret

0000015e <led_on>:

void  led_on(uint8_t led_no)
{
	Leds &= ~(1 << led_no);
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <led_on+0xa>
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	8a 95       	dec	r24
 16a:	e2 f7       	brpl	.-8      	; 0x164 <led_on+0x6>
 16c:	20 95       	com	r18
 16e:	80 91 00 02 	lds	r24, 0x0200
 172:	28 23       	and	r18, r24
 174:	20 93 00 02 	sts	0x0200, r18
	PORTL = Leds;
 178:	20 93 0b 01 	sts	0x010B, r18
}
 17c:	08 95       	ret

0000017e <led_off>:

void  led_off(uint8_t led_no)
{
	Leds |= (1 << led_no);
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <led_off+0xa>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	8a 95       	dec	r24
 18a:	e2 f7       	brpl	.-8      	; 0x184 <led_off+0x6>
 18c:	80 91 00 02 	lds	r24, 0x0200
 190:	82 2b       	or	r24, r18
 192:	80 93 00 02 	sts	0x0200, r24
	PORTL = Leds;
 196:	80 93 0b 01 	sts	0x010B, r24
}
 19a:	08 95       	ret

0000019c <led_set>:

void  led_set(uint8_t led_mask)
{
	Leds = ~led_mask;
 19c:	80 95       	com	r24
 19e:	80 93 00 02 	sts	0x0200, r24
	PORTL = Leds;
 1a2:	80 93 0b 01 	sts	0x010B, r24
}
 1a6:	08 95       	ret

000001a8 <main>:
void led();	//함수원형 waring이 나올 수 있다.
static uint8_t i;
int main()

{
	led_init();
 1a8:	0e 94 9c 00 	call	0x138	; 0x138 <led_init>
 1ac:	28 c0       	rjmp	.+80     	; 0x1fe <main+0x56>
//	uint8_t i;
	int i;
	while(1){
	for(i=0; i<8; i++)
	{
	led_on(i);
 1ae:	8c 2f       	mov	r24, r28
 1b0:	0e 94 af 00 	call	0x15e	; 0x15e <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	9f e3       	ldi	r25, 0x3F	; 63
 1b8:	a2 e0       	ldi	r26, 0x02	; 2
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	a0 40       	sbci	r26, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x12>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x1c>
 1c4:	00 00       	nop
	led_init();
//	led_off_all();
//	uint8_t i;
	int i;
	while(1){
	for(i=0; i<8; i++)
 1c6:	21 96       	adiw	r28, 0x01	; 1
 1c8:	c8 30       	cpi	r28, 0x08	; 8
 1ca:	d1 05       	cpc	r29, r1
 1cc:	84 f3       	brlt	.-32     	; 0x1ae <main+0x6>
 1ce:	c7 e0       	ldi	r28, 0x07	; 7
	led_on(i);
	_delay_ms(100);
	}
	for(i=7;i>=0;i--)
	{
	led_off(i);
 1d0:	8c 2f       	mov	r24, r28
 1d2:	0e 94 bf 00 	call	0x17e	; 0x17e <led_off>
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	9f e3       	ldi	r25, 0x3F	; 63
 1da:	a2 e0       	ldi	r26, 0x02	; 2
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	a0 40       	sbci	r26, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x34>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x3e>
 1e6:	00 00       	nop
 1e8:	c1 50       	subi	r28, 0x01	; 1
 1ea:	90 f7       	brcc	.-28     	; 0x1d0 <main+0x28>
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	9f e3       	ldi	r25, 0x3F	; 63
 1f0:	a2 e0       	ldi	r26, 0x02	; 2
 1f2:	81 50       	subi	r24, 0x01	; 1
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	a0 40       	sbci	r26, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x4a>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x54>
 1fc:	00 00       	nop
	led_init();
//	led_off_all();
//	uint8_t i;
	int i;
	while(1){
	for(i=0; i<8; i++)
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	e2 cf       	rjmp	.-60     	; 0x1c8 <main+0x20>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
